#!/bin/bash

###############################################################################
#
# EXECUTION
#
###############################################################################

# source /home/DocSalvager/bin/kit-044
### 20190107  - TEMPORARY FOR TESTING? -

[[ -x "$0" ]]  || {
  xmessage -center -timeout 5 "  ACCESS DENIED -- For security, '$0' must be executable as it contains shell script code.  " &
  exit 1
}
### ABORT if this file not executable

# FILE_kit_meta="
kit_meta_help="
NAME
    kit.meta

SYNOPSIS
    kit.meta - Display this text and exit instead of just being searched

DESCRIPTION
    This might be called an \"executable data file\" as it primarily consists of
    bash variable strings (key=\"value\" pairs) containing meta data, help text and
    other notes used by the kit executable library of functions.

    kit explicitly requires this file to have execute permission to aid
    security as many of the variables contain embedded \$(commands...)
    (e.g. Bash Command Substitution).

    Instead of sourcing this file however, the kit function varFind()
    retrieves the individual metadata variable strings and interprets
    them programmatically to dramatically reduce the memory requirements
    (by over 50%).

NOTES
    Geany Editor:
      When editing this file, to list these variables in the index pane on the left,
      set the document filetype to 'Miscellaneous >> Config' instead of the default
      of shell script.

REVISED
    20180929 by docsalvager
"
#
printf "$NL%s$NL" "$kit_meta_help"


exit


###############################################################################
###
### END OF SCRIPT when executed.
###   remaining code is retrieved programmatically by kit-000
###   MUST exit here so will not attempt to execute $(...) command substitutions.
###
###############################################################################


###############################################################################
#
# NOTES
#
###############################################################################

textcommands="
Text Processing Commands
    http://www.tldp.org/LDP/abs/html/textproc.html
"

textprocessing="$textcommands"

parameterexpansion="
Parameter Expansion Notes
    \${parameter#??}
      ( per http://unix.stackexchange.com/a/109074/27437 )(edited)
        For example, suppose that the variable foo contains 'a* b* c*' and the
        current directory contains the files bar, baz and paz. Then ${foo#??} is
        expanded as follows:
            1.  The value of the variable is the 8-character string 'a* b* c*'.
            2.  #?? means strip off the first two characters, resulting in the
                6-character string ' b* c*'(with an initial space).
            3.  If the expansion is in a list context (i.e. not in double quotes
                or other similar context), continue.
            4.  Split the string into whitespace-delimited words, resulting in a
                list of two-strings: 'b*' and 'c*'.
            5.  The string 'b*', interpreted as a pattern, matches two files:
                    bar
                    baz
                The string 'c*' matches no file so it is left alone.
                The result is a list of three strings: 'bar', 'baz', 'c*'.
"


###############################################################################
#
#   kit METADATA
#
#   NOTE:
#     Each variable MUST be separated from the next by a blank line
#     and the text must be enclosed in either single- or double- quotes
#     with appropriate internal quoting in order for note() function
#     to retrieve properly.
#
###############################################################################

kit_DESCRIPTION='
  DESCRIPTION
    A toolkit of functions to ease bash development.
  PRINCIPLES
    Internally, minimum redundancy requires more dependency.
      Factor out repetitious code.
    Externally, minimum dependency requires more redundancy.
      Source this library at beginning of each script so its functions can be
      used to minimize development time and in-memory code size.
  SPECIAL NOTE
    This script is usually sourced rather than executed.
    Once sourced, subsequent calls directly invoke the function matching
    either the name of this script or the name of a hardlink or symlink
    matching the name of a function in this script or any other loaded
    function (i.e. exported or sourced prior to sourcing this script).
'

kit_CHANGES="
  20110826  Developed by Robert \"DocSalvage\" Watson
  20110916  Added generic gui...(zenity) functions
  20110917  Renamed rcwshell to fnlib
  20130606  Renamed fnlib to shlib and created fnlib link for backward compat.
  20130606  Changed zenity to yad in apiConfirm() and apiPrint()
  20130606  Added now()
  20130606  logStatus() now sets TIME and LOGFILE if not set
  20130529  Version 0.1.0
  20130608  Version 0.1.1 Merged in status() functions
  20130624  Renamed shlib to gshlib and created shlib link for backward compat.
  20130624  Add group braces {} to { isNotNull && isHelp(); }... calls
  20130628  Version 0.2.0
            Combined function libraries 'include' and 'gshlib' into 'bashtool'
  20130629  Added group braces {} to isHelp() calls in each function as needed
  20130705  Version 0.2.1 - Begin using bashtool in zimdialog.
  20130706  fileIn: Changed local var 'PATH to 'path'.
  20130721  Added memoryShow().
  20130905  Extensive changes including...
            BugFix:
              --help showing for intermediate functions instead of desired function
            Added version(), versionShow()
  20130909  Added helpGen() and fixed --help,
            added argLast(), variables(), fnName(), dirMake(),
            changed fnLoaded(),
            renamed fullFile...() to pathStr...()
            renamed pathname() to pathName()
  20130912  Added logger() wrapper for additional help.
  20130913  Added nssEntries().
  20130928  Changed INITIALIZE...isExecuting logic so that...
            - If command name is 'bashtool' then all --help* related options available.
            - If command name is a symlink that is not a function name, same as \"bashtool\".
            - If command name is same as a function name, the function is executed.
              Common options like --CLI, --GUI, --diag, etc. are available with
              all other arguments passed to the function.
  20130929  Added pstree().
  20131002  Set version 0.2.2
            - Major rewrite of argument handling logic and --help sections
              - No longer shows argsResetTo() --help behind every other help.
              - Combined isHelp() and helpShow() into ifHelpShow() and updating
                functions to use it instead as they are touched.
  20131007  Modified dirClose() to use --empty and --purge options.
  20131011  Complete rewrite of pathStr().
  20131012  Complete rewrite of dirMake().
  20131012  Set version to 0.2.3.
  20131020  Renamed uiPrint() to uiShow() for consistancy.
  20131020  Improved support for symlink creation in dirMake().
  20131020  Created pathRelativePy() from http://unix.stackexchange.com/a/85069/27437
  20131020  Updated help of pathRelative().
  20131123  Added standbyBg().
  20131209  Improved help in scriptCommand() and scriptSource().
            Corrected FUNCNAME[] indexes in calledByMain() and calledBySelf().
            Replaced interface() and interfaceSet() with uiGet() and uiSet().
            Updated helpGen().
            Replaced filenone with filenotfound in abort().
            Added logAll().
            Set version to 0.2.4
  20140111  Renamed variables() to varShow() since it pops up a dialog.
  20140218  Change in EXECUTION section at end ...
              Changed \$@ to \"\$@\" to support quoted arguments when
              executing function in first argument.
  20140510  Added printf() wrapper to document unfamiliar 'multi-invocation'
            feature that makes it look like printf is executing multiple times.
  20140627  Changed argsNumber to use the synonymous \"\$#\" instead of \"\${#@}\"
            per question in ...
            http://unix.stackexchange.com/questions/138634/shortest-way-to-extract-last-3-characters-of-base-minus-suffix-filename/139427?noredirect=1#comment225151_139427
  20140629  Set version to 0.2.5
            New 'extended help functions' for external commands, with names like 'printf_help'.
            Added bash_help(). printf() changed to printf_help. yad() changed to yad_help.
            Deprecated textLinesHt() and wrap().
            uiShow now has options --middle and --title.
            Added the help dialog global variables...
              GEOMETRYLG, GEOMETRYSM, HELPSIZE, HELPLINESLG, HELPLINESSM, HELPFONT
  20140801  Set version to 0.2.6
            Added bash settings and options lists to diagnostics().
            Fixed bug in pathStr(): --ext not handling dotfiles properly.
  20140915  Version to 0.3.0
            Major Upgrade including but not limited to ...
            - All help text moved to an 'annotations' file.
            - uiShow replaced with annotationShow and dialogShow.
            - All functions support debugging trace which is activated by adding
              the function name to the space-separated list in the \$TRACE string.
            - argsParse() now works, though slow.
            - logEntry() renamed logSystem (writes to syslog/messages)
            - Deprecated obsolete functions including...
              - bashtool() replaced by main()
              - options()
              - ... much more ...
  20140918  Version to 0.3.1
            - helpAll() produces menu of functions (fnList) to choose details from.
            - intermediate version with incomplete changes
  20140920  Version to 0.3.2
            - All code that must run at beginning of any function consolidated
              into fnInit(). Includes --help handling. No circular reference
              detection code anymore. It was creating cir-refs. More stable
              without it.
  20140920  Version to 0.3.3
            - Renamed to 'kit'
            - Fixed fileselectionShow()
            - No longer exporting all functions with '#!/bin/bash -a'. Not needed.
            - Global constants (metadata) prefixed with 'kit_'
  20141018  - annotation() and annotationShow() now convert hyphens in command names
              to underscores as hyphens are illegal in variable names which
              command names are converted into.
  20141020  - Prefixed global vars to distinguish btwn multiple sourced metadata.
            - Brought forward changes made to bashtool-032 to make archive-031 stable.
            - Renamed main() to kit() to distinguish metadata from dependant scripts
              which 'overlay' this one (kit).
            - Added printat().
  20141030  - Deprecated...
               - scriptSource()
               - scriptCommand()
               - isExecutable()
               - isExecuting()
               - isSourcing()
               - ifHelpShow()
  20141101  - Revised...
               - annotation()
               - annotationShow()
               - dialogShow()
               - errorShow()
               - fileIn()
               - filEShow()
               - fnShow()
               - guiDirSelect()
               - guiError()
               - guiInfo()
               - guiList()
               - guiProgress()
               - helpAll()
               - printf()
               - varFind()
  20141116  - Added...
              - fileLocal()
  20141210  Version to 0.3.4
            - changes to every function to accomodate changes to fnInit()
            - added support for --help-text=\"...\" option
            - multiple versions can be used as name now includes version number
              (i.e. kit-034)
            - Changes to argument parsing rules...
              - An 'option' is any argument that begins with two hyphens(--).
              - Any argument following an option and not beginning with two
                hyphens may be assumed to be the options argument. Such
                option-arguments may more reliably be suffixed to the option
                following (=) (i.e. --option=\"option argument\").
              - All arguments following the argument '--' are treated as
                non-option positional arguments, regardless of leading hyphens.
                Place file/directory globbings(wildcarded) after a ' -- '.
              - Thus, if the last option (e.g. --option) does not take an
                argument, and is to be followed by positional arguments, then
                an end-of-options(--) argument should be inserted between them.
  20141212  Version to 0.3.5
            - Multiple concurrent versions supported by including version number
              suffix as in script name as in...
                kit-035
              For commandline convenence, may optionally create the symlink...
                kit --> kit-035
              But ALWAYS use the full script name when sourcing or executing
              from another script to insure compatibility.
            - Added...
              - dirOpen()
              - dirClose()
  20141214  - Renamed...
              - inspectFn()- to- inspFn()
              - inspectVars()- to- inspVar()
              - inspectVarsShow()- to- inspVarShow()
  20150102  - Added...
              - fileOpen()
              - fileClose()
  20150103  - Changes to argument parsing rules...
              - Eliminated support for space between an option and its argument
                - Example:
                    cmd --option \"argument string\"
                - WHY?
                  Unable to find a clean way to resolve the case where an
                  option that does not take an argument preceeds a non-option.
                  Is the non-option an option-argument or a positional argument?
                - NOW
                  Option arguments must follow an equals (=) suffix as in...
                    cmd --option=\"argument string\"
            - As added security, now requires both the main script (kit-000),
              as well as the meta file (kit-000.meta) to be executable as they
              both contain executable shell script code.
  20160507
    Issue - Options within text
      Description:
        Text like '--title' inside help text being picked up as an
        option in functions like dialogShow(), optionArg().
      Development:
        20160413 - 20160507
  20160207
    Bump Version to 0.3.9
  20160616
    Bump Version to 0.4.0
      Description:
        Merge meta script and functions back into kit and merge with
        fnInit(), replacing it with meta(). meta() invoked as a command
        works like meta script did.
      Development:
        20160616 -
  20170511
    Bump Version to 0.4.1
  20171221
    Bump Version to 0.4.2
  20180124
    Bump Version to 0.4.3
  20181116
    Bump Version to 0.4.4
      Explicitly added kit_PATH to PATH
      Moved development to LX02 (AntiX)
"

kit_INPROGRESS="
"

kit_LICENSE='
  Copyright 2013-2018 Robert "DocSalvager" Watson <robertcwatson1@gmail.com>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  MA 02110-1301, USA.
'

kit_REQUIRES="
    $kit_META
    bash
    busyBox
    gawk
    gtkdialog

    (see also \$kit_SUPPORTS)
"

kit_SUPPORTS="
  Written and Tested with:
    Related:
      $kit_META
    System:
      Puppy Linux 5.2.2
      Puppy Linux 5.2.8
      Ubuntu 8.04.4
      Ubuntu 10.04.2
    Software:
      Bash 3.2.39
      Bash 4.1.0
      Bash 4.1.5
      BusyBox 1.13.3
      BusyBox 1.16.2
      gawk 3.1.6
      gawk 4.0.0
      gtkdialog 0.7.20 (20161201: gtkSpinner only)
      gtkdialog 0.8.0 (20161201: gtkSpinner only)
      gtkdialog 0.8.4 (20161201: gtkSpinner only)
      libgtk2desklet.so (20161201: gtkSpinner only - transparent window)
      Python 2.6.4 (20161201: pathRelativePy only)
      xmessage 1.6
      YAD 0.28.1
      Zenity 2.22.1
      Zenity 2.30.0
"

kit_TODO='
'


###############################################################################
#
#   kit FUNCTIONS HELP
#
###############################################################################

____help="
___  \"text, or code to comment out\"
    (3 underscores) GtkDialog code embedded comment.
      \"\$(___ Enclose function in double-quotes and surround GtkDialog code)\"
      \"\$(___ with single-quotes and pass as parameter to function)\"
      \"\$(___ ... this code is commented out ...)\"
REVISED
    20190106 by docsalvager
"

___exit_help="
NAME
    ___exit - cleanup and exit kit

SYNOPSIS
    ___exit \"\$@\"

DESCRIPTION
    Exit script. Produces inspection diagnostics if script called with --inspect.

EXAMPLE
    isExecuted  && { ___run \"\$@\"; ___exit \"\$@\"; }\

REVISED
    $_revised by docsalvager
"

___init_help="
NAME
    ___init - Initialize global variables

SYNOPSIS
    ___init \"\$@\"

DESCRIPTION
    Initialize global variables.

EXAMPLE
    ___init \"\$@\"

REVISED
    $_revised by docsalvager
"


___initUIDLG_help="
NAME
    ___initUIDLG - Initialize user interface variables

SYNOPSIS
    ___initUIDLG

DESCRIPTION
    Determines and prints type of user interface currently active: GUI, CLI or LOG.
    Order of priority...
        If \$DISPLAY is set then UI=GUI
        If \$(tty) is true then UI=CLI
    Sets user interface variables UI and DLG.
    UI (User Interface) values...
        CLI     Terminal or console command line (includes ncurses support)
        GUI     Graphical interface
        LOG     No user output. Write to log only.
    DLG (DiaLoGer) values...
        dialog      Ncurses dialog/cdialog dialoger program
        yad         YAD GUI dialoger
        zenity      zenity GUI dialoger

NOTES
    - Obsoletes uiGet so use instead:
        On commandline...
            kit --alt inspVar UI DLG
        In scripts...
            var=\"\$UI\"
            var=\"\$DLG\"

REPLACES
    uiInit
    userInterface

REVISED
    $_revised by docsalvager
"


abortDLG_help="
NAME
    abortDLG - Abort due to unknown GUI dialog tool

SYNOPSIS
    abortDLG

REVISED
    20190124 by docsalvager
"

abortExit_help="
NAME
    abortExit - Unconditionally abort, print function and optional comment

SYNOPSIS
    abortExit  FUNCTION  [COMMENT]

DESCRIPTION
    Print calling FUNCTION name and optional COMMENT (or argument list, etc.)
    and exit.

REVISED
    20190706 by docsalvager

$(noteFind "errorShow_help" --file="$kit_DIR/$kit_META")
"

abortShow_help="
abortShow  CAUSE  [COMMENT]
    Show standard message for CAUSE on current interface.
    Include optional COMMENT if supplied.followed by
    (CLI, GUI or API(log)) and then exit.
    Replaces:
        abort
    Requires:
        errorShow

REVISED
    $_revised by docsalvager

$(noteFind "errorShow_help" --file="$kit_DIR/$kit_META")
"

abortUI_help="
NAME
    abortUI - Abort due to unknown user interface

SYNOPSIS
    abortUI

REVISED
    20190124 by docsalvager
"

admList_help="
admList
    Show entries from administrative databases...
      ahosts ahostsv4 ahostsv6 aliases ethers group gshadow
      hosts netgroup networks passwd protocols rpc services shadow
    Replaces:
      nssEntries()
    Requires:
      getent
REVISED
      20160817 by docsalvager
"

aliasOf_help="
NAME
    aliasOf - Execute alternate function.

SYNOPSIS
    aliasOf FUNCTION \"\$@\" [EXPLICITARGS]

DESCRIPTION
    Pass all arguments to FUNCTION and execute as if it had been called instead.
    Prepends an alias-of message to top of help text.

ARGUMENTS
    FUNCTION
        Required. Name of the kit function that this is an alias of.
    EXPLICITARGS
        Optional. Explicit options may be appended in order to create commands
        that are variations of a function. EXPLICITARGS must follow the passed
        through arguments (\"\$@\") so that the '--help' option inserted by the
        'meta' command is the first argument to the aliased function.

EXAMPLES
    function foo () { aliasOf bar \"\$@\"; }
    function commands () { aliasOf names \"\$@\" --type command; }
    function functions () { aliasOf names \"\$@\" --type function; }


REVISED
    $_revised by docsalvager
"


apiCondition_help='
apiCondition $VAR
     Echos "true" if $VAR is a non-empty string. Otherwise echos "false".
 REVISED
         20140915 docsalvage
'

argAlt_help="
NAME
    argAlt - Interpret --alt argument and print new list of arguments

SYNOPSIS
    argAlt \"\$@\"

DESCRIPTION
    Interpret --alt argument and print new function name to execute,
    followed by its arguments.

NOTE
    The result is usually destined for the CMD_ARGS[] array where...
      - array[0] will be the function name
      - array[1]... will be the function's arguments

EXAMPLE
    To handle --alt option and reset CMD_ARGS array...
          CMD_ARGS=( \"\$(argAlt \"\$@\")\" ); CMD=\"\${CMD_ARGS[0]}\"

REVISED
    $_revised by docsalvager
"

argNonOption_help="
NAME
    argNonOption -

SYNOPSIS
    argNonOption ORDINAL \"\$@\"

DESCRIPTION
    Prints the ORDINAL number non-option argument in the first sequence of
    non-option arguments. Usually there should only be one sequence of
    non-option arguments, optionally following the special '--' argument that
    indicates the end of options. Anything following it should be treated as
    non-option (positional) arguments. But this function is tolerant of multiple
    sets, though only the first is searched.

EXAMPLES
    Find second non-option argument ...
        function func () {
            :
          _secondarg=\"\$(argNonOption 2 \"\$@\")\"
            :
        }
        func --aaa bbb -- ccc ddd --eee
            ( prints 'ddd' )
    Find third non-option argument.
        kit-040 argNonOption 3 --option 'aaa' 'bbb' 'ccc' 'ddd' -- 'fff' 'ggg' -- 'hhh'
            ( prints null('') since 'aaa' thru 'ddd' are option arguments )
            ( and neither of the two non-option sets has 3 arguments.     )

REVISED
    $_revised by docsalvager
"

argsArray_help="
argsArray ...
    Currently just displays the arguments passed in function call.
    Used to diagnose quoting errors.
    Notes:
        UNFINISHED
REVISED
        20160917 by docsalvager
"

argsIndexes_help="
argsIndexes \"\$@\"
    Print space-delimited list of the argument number.
    Example:
        for ...

REVISED
    20190106 by docsalvager
"

argsLast_help="
argsLast \"\$@\"
    Echoes the last argument passed.
    Replaces:
        argLast
REVISED
        20140915  docsalvager
"

argsNumber_help="
argsNumber \"\$@\"
     Echos number of arguments.
     Wrapper for \"\$#\" or \"\${#@}\" which are equivalent.
     Verified by testing on bash 4.1.0(1):
         20140915 docsalvage
     Replaces:
         argsCount
 REVISED
         20170412 by docsalvager
"

argsParse_help="
argsParse \"\$@\"
    Parse commandline parameters into a standard format.
    Legacy interpretation where -abc would be split into -a -b -c is not
    supported. Single-hyphen options are thus treated same as double-hyphen.
    This function is slower than getopt(s) but insures arguments are in the
    form desired and clearly documents the process. Avoid using if possible.
    Example:
        eval set -- $(argsParse \"\$@\")
REVISED
        20140916  docsalvager
"

argsPos_help="
argsPos ARGUMENTS
    Print only the positional ARGUMENTS. That is, arguments that are not
    --options or --option=arguments. Options are any word beginning with
    2 hyphens(--). An option argument must be appended to the option
    following an (=) as in ...
        --option=\"argument string\"
    Example:
        _pargs=\"\$(argsPos \"\$@\")\"
    WARNINGS:
        o Single hyphen option prefixes are deprecated.
        o Option arguments not appended to the --option=
          are treated positional arguments.
REVISED
    20190106 by docsalvager
"

argsStrings_help='
argsStrings FUNCTIONNAME "$@"
    Used in argument parsing. Prints a single string containing all arguments
    with each argument surrounded by escaped double-quotes.
    Should work with ash argument strings as well.
    Double-quotes inside an argument are escaped (\").
    Single-quotes inside an argument are not escaped as bash treats them as literals.
    Example:
        For...
            $ echo dialogShow --me "now" "please" "--will-you" | kit-039 argsStrings
        Result of script line STDIN="$(argsStrings ${FUNCNAME} $(stdin))" ...
            "dialogShow" "--me" "now" "please" "--will-you"
REVISED
        20160309 docsalvager
'

argsValid_help='
argsValid CMD ARG...
    Sanitize arguments by removing any that cause CMD to error.
    Arguments:
        CMD
          A command or function.
        ARG
          One or more arguments.
REVISED
        20160112 docsalvager
'

arrayIndex_help="
NAME
    arrayIndex - Print index number of array item matching a string

          --- 20190114 - DOES NOT WORK AT THIS TIME SO HAVE COMMENTED OUT ---

SYNOPSIS
    arrayIndex FIND ARRAYORSTRING

DESCRIPTION
    Print the index in indexed array ARRAYORSTRING where the value is FIND.

ARGUMENTS
    FIND
        May be a variable or literal.
    ARRAYORSTRING
        The name of the variable without at leading '\\$'. Thus...
            _arr=( \"aaa\", \"bbb\" )
            echo \"\$(arrayIndex \"bbb\" _arr)
        ... prints '1' since arrays are indexed from zero(0).

DEPENDANTS
    20190114  linkman(?), zimdialog(?)

REVISED
    $_revised by docsalvager
"

batchExec_help="
NAME
    batchExec - Batch execute a command. Used in script test_pathStr

SYNOPSIS
    Batch execute a command. Used in script test_pathStr.

REVISED
    $_revised by docsalvager
"

calledByMain_help='
calledByMain  && ...
    Returns true (0) if calling function was called directly by main script.
REVISED
        20140915 docsalvage
'

calledBySelf_help='
calledBySelf
    Returns true (0) if calling function is calling itself.
REVISED
      20140915 docsalvage
'

cmdType_help="
NAME
    cmdType - Print the (type -t) command type

SYNOPSIS
    cmdType NAME

DESCRIPTION
    Wrapper for bash \"type -t\" command that prints nothing and returns false(1)
    if no arguments or if NAME is an option (begins with a hyphen[-]).
    Excerpt from bash \"help type\":
        Display information about command type.
        For each NAME, indicate how it would be interpreted if used as a
        command name.
          :
        Output a single word which is one of \"alias\", \"keyword\", \"function\",
        \"builtin\", \"file\" or \"\", if NAME is an alias, shell reserved word,
        shell function, shell builtin, disk file, or not found, respectively.

ARGUMENTS
    NAME
        Command name to be interpreted.

NOTES
    The command type of \"file\" is only printed for executable (binary or
    script) files.

REVISED
    20181212 by docsalvager
"

colorPref_help="
colorPref NAME [--notes] [--metafile METAFILE]
    By default, prints hex color code (#000000) assigned to NAME in METAFILE.
    Options:
        --notes
            Instead of hex code, print note in METAFILE
            about where color NAME is used.
        --metafile METAFILE
            Search METAFILE instead of the default \$METAFILE.
    Requires:
        optionArg
        varFind
    Notes:
        - Unable to get opacity to be stored anywhere despite being supported
          by the yad and gcolor2 tools.
    WARNING:
        Uses eval to support process substitution \$() in meta data. This
        provides for inclusion of help from related and/or dependent commands.
    ToDo:
        - Modify to read standard color names from...
            /etc/X11/rgb.txt
            /root/.rgb.txt
            /usr/share/X11/rgb.txt
        - Merge most code of NoteFind(), colorPref() together.

REVISED
  20160927 by docsalvager
"


commands_help="
NAME
    commands - List all commands reachable via \$PATH.

SYNOPSIS
    commands [--paths]

DESCRIPTION
    Lists all commands reachable via the current \$PATH. The list is ordered by
    the directory's position in \$PATH and within that, alphabetically.

OPTIONS
    --paths
        Include the full absolute logical path.

REVISED
    20171116 by docsalvager
"

confirmExec_help="
NAME
    confirmExec - Show command to be executed and wait for confirmation

SYNOPSIS
    confirmExec COMMAND-LIST

DESCRIPTION
    Prints COMMAND-LIST string in a dialog and asks for confirmation.
    If confirmed, executes the COMMAND-LIST.
    If UI=\"GUI\", shows a yad dialog.
        Click Okay   returns true  (0).
        Click Cancel returns false (1).
        Click Quit   returns false (2).
    If UI=\"CLI\", echoes text to commandline.
        Enter y|Y    returns true  (0).
        Enter n|N    returns false (1).
        Click q|Q    returns false (2).

OPTIONS
    <none>

DEPENDS
    confirm()

TODO(?):
    Add options ...
        $1 = -m
        $2 = {max-num-values}

REVISED
    $_revised by docsalvager
"


dialog_help="
NAME
    dialog - User output using best available user interface tool.

SYNOPSIS
    [ ... | ] dialog [--OPTION...] [-- TEXTSTRING]

DESCRIPTION
    Print a text string to best available (or selected) user interface.
    Appends stdin, if any, to output.

OPTIONS
    --image NAME
        NAME is either a stock GTK icon name like \"gtk-dialog-error\"
        or a complete path to an icon image file.
    --middle
        Attempt to center [beforeSTRING+]TEXTSTRING[+afterSTRING] vertically.
    --stdin
        Will wait up to 1 sec for text via STDIN (/dev/stdin) that will then be
        appended to any text in TEXTSTRING (see below).
    --title STRING
        STRING title for the GUI window if any.
    -- TEXTSTRING
        Text to show. TEXTSTRING may be multiline and should be double-quoted(\")
        with any internal double-quotes, dollar-signs(\$), or backslashes escaped.
        (i.e. \\\"\\\$@\\\"). Thus, to print (\\\") requires the text (\\\\\\\").

NOTES
    - Left and right arrow keys scroll text horozontally.
    - The --before and --after options have been moved to note().

REPLACES
    uiShow
    dialogShow

SUPPORTS (preferred first)
    YAD 0.28.1
    YAD 0.12.4
    Zenity 2.30.0
    commandline+ncurses dialog(cdialog) external command
    commandline (text)

REVISED
    $_revised by docsalvager
"


dialogCombo_help="
NAME
    dialogCombo - Prompt for input using a single-column combobox (editable picklist).

SYNOPSIS
    dialogCombo [OPTION...] [-- PICKLIST]

DESCRIPTION
    If PICKLIST contains multiple quoted values, they are presented in a combo
    box for selection. First selection is blank for entering a new item.
    Prints selections, one per line. Returns true(0) only if something was entered
    or selected. Otherwise, returns false(1).

WARNING
    Ctrl-click/Shft-click are NOT supported to make multiple selections at this time.

OPTIONS
    --title
        Window title. Defaults to script.function.
    --label
        Entry label to left of input field.
    --text
        Dialog text.
    PICKLIST
        Editable quoted selection strings.

REVISED
    20170518 by docsalvager
"

dialogConfirm_help="
NAME
    dialogConfirm - Ask for confirmation before proceeding

SYNOPSIS
    dialogConfirm [--text] TEXT [--info INFO] [--title TITLE]

DESCRIPTION
    Ask for confirmation before proceeding.
    In a YAD dialog...
        Click Okay   returns true  (0).
        Click Cancel returns false (1).
        Click Quit   returns false (2).
    In a commandline dialog...
        Enter y|Y    returns true  (0).
        Enter n|N    returns false (1).
        Click q|Q    returns false (2).

OPTIONS
    --title
        Window title.
    --text
        Dialog text.
    --info
        Extended information such as lists of filenames.

REVISED
    20190106 by docsalvager
"


dialogEntry_help="
NAME
    dialogEntry - Prompt for text input. PROMPT is a text string

SYNOPSIS
    dialogEntry [OPTION...] [-- DEFAULTENTRY]

DESCRIPTION
    Prompt for text input. PROMPT is a text string.

OPTIONS
    --title
        Window title. Defaults to script.function.
    --label
        Entry label to left of input field.
    --text
        Dialog text.
    --yadopts
        YAD options for special requirements... without the leading hyphens...
            dialogEntry ... --yadopts center licon=<icon-file> ...
    DEFAULTENTRY
        Default entry text.

REVISED
    $_revised by docsalvager
"


dialogSelect_help="
NAME
    dialogSelect - Dialog to select from a pick list or enter a new item.

SYNOPSIS
    dialogSelect [OPTION...] -- \"COLUMNDATA\" [\"COLUMNDATA\"...]

DESCRIPTION
  (kit function)
    Pick from a list. Prints all columns of the selected row with each column
    separated by SEP. SEP defaults to YAD's standard '|' delimiter.

OPTIONS
    --column \"COLUMNNAME\"...
        Optional list of 1 or more columns. Defaults to single \"Select\" column.
    --height \"HEIGHT\"
        Optional height of dialog window in pixels.
    --print-column \"PCOL\"
        Optional column# to print or \"ALL\". Defaults to \"ALL\".
    --separator \"SEP\"
        Optional output column separator & terminator string. Defaults to '|'.
        Use '--separator \"\"' to prevent any separators or terminators.
    --text \"TEXT\"
        Optional dialog text.
    --title \"TITLE\"
        Optional window title. Defaults to script.function.
    --width \"WIDTH\"
        Optional width of dialog window in pixels.

  +--- DISABLED 20170424 due to GTK bugs -----------+
  |                                                 |
  | --multiple                                      |
  |     Allow multiple selections.                  |
  |                                                 |
  +-------------------------------------------------+

    -- COLUMNDATA
      - If a single multiline string is supplied, each line will fill one column.
      - If quoted, space separated strings are supplied, each will fill one column.
      - If no --column option or only one COLUMN, each string will be on a
        seperate row and thus be a seperate selection.
      - If --column option with multiple COLUMN arguments, each COLUMNDATA
        string, or each line of a multiline string, will appear in the
        corresponding column. On exhaustion of COLUMNs, a new row is started.
        Thus...
            dialogSelect --column \"One\" \"Two\" -- \"aaa\" \"bbb\" \"ccc\"
        will result in...
            One   Two
            ----- -----
            aaa   bbb
            ccc
        And...
            A=\"
            aaa bbb
            ccc ddd
            \"
            dialogSelect --column \"One\" \"Two\" -- \"\$A\"
        will result in...
            One       Two
            --------- ---------
            aaa bbb   ccc ddd

SUPPORTS (preferred first)
    YAD 0.28.1
    YAD 0.12.4
    Zenity 2.30.0
    commandline+ncurses dialog(cdialog) external command
    commandline (text)

REVISED
    $_revised by docsalvager
"

dirModified_help="
NAME
    dirModified - Keep a list of all files added or changed (for auto-archive)

SYNOPSIS
    dirModified [--start] DIR
    dirModified  --stop   DIR

DESCRIPTION
    Uses command 'inotifywait' to log modifications to files in DIR.
    Captures the events:
      create
      moved_to
      modify
    Modifications are listed in the cache file...
      $HOMEDIR/cache

OPTIONS
    [--start] DIR
        Start inotifywait process to monitor DIR.
    --stop DIR
        Stop inotifywait process(es) monitoring DIR.

DEPENDS
    inotifywait

REVISED
    20171228 by docsalvager
"


dirClose_help='
dirClose  [OPTION]  DIRECTORY
    Discontinue access to a directory opened with dirMake() or dirOpen().
    Options:
        <none>
            Leave DIRECTORY and its contents intact.
        --purge
            Unconditionaly remove(delete) DIRECTORY (links to it will remain).
        --empty
            Unconditionally remove just the contents of DIRECTORY (links will remain).
    Examples:
        To completely remove a directory and its contents but leave any symlinks
        that point to it, though they are broken for now...
            dirClose --purge "$CACHE/$PROC.$PID"
        To remove just the contents of a directory and thus leaving it empty...
            dirClose --empty "$CACHE/$PROC.$PID"
REVISED
        20170314 by docsalvager
'

dirMake_help="
dirMake  [OPTIONS]... DIRECTORY
    Create directory if it does not already exist.
    Creates any parent directories that do not already exist as well.
    Echo full path name if directory has to be created.
    Options:
        --link=NAME    Also create symbolic link NAME pointing to DIRECTORY
    Examples:
        To open an existing directory...
            dirMake \"\$CACHE/\$PROC.\$PID\"
        To open a new directory (no difference in call)...
            dirMake \"\$CACHE/\$PROC.\$PID\"
        To open a new directory and create a symbolic link to it...
            dirMake --link \"\$NAME\" \"\$CACHE/\$PROC.\$PID\"
    ToDo:
        Mitigate mkdir errors
        Add support for ...
            --mode=MODE    Set file mode (as in chmod), not a=rwx - umask
            --parents      No error if existing, make parent directories as needed (default)
            --verbose      Print a message for each created directory
            --context=CTX  Set the SELinux security context of each created directory to CTX
REVISED
        20140915 docsalvage
    See also:
        mkdir...

$(command mkdir --help)
"

dirOpen_help="
NAME
    dirOpen - Insure directory exists and is writable by creating it if necessary

SYNOPSIS
    dirOpen  [OPTION...] [--dir] DIRECTORY

DESCRIPTION
    Opens directory...
        Creates directory if it does not already exist.
        Creates any parent directories that do not already exist as well.
        Prints absolute-physical path of DIRECTORY.

OPTIONS
    [--dir] DIRECTORY
        If first argument is not an --option, it will be assumed to be the
        DIRECTORY to open.
    --link LINK
        Also create symbolic LINK pointing to DIRECTORY

REQUIRES
    mkdir

EXAMPLES
    To open an existing directory...
        dirOpen \"\$CACHE/\$PROC.\$PID\"
    To open a new directory (no difference in call)...
        dirOpen \"\$CACHE/\$PROC.\$PID\"
    To open a new directory and create a symbolic link to it...
        dirOpen --link \"\$NAME\" --dir \"\$CACHE/\$PROC.\$PID\"

TODO
    - Mitigate mkdir errors.
    - Add support for ...
        --mode=MODE    Set file mode (as in chmod), not a=rwx - umask
        --context=CTX  Set the SELinux security context of each created directory to CTX

REVISED
    $_revised by docsalvager

SEE ALSO
    mkdir...

$(command mkdir --help)
"

errorShow_help="
NAME
    errorShow - Show standard message for CAUSE on current interface

SYNOPSIS
    errorShow [--cause] CAUSE [--comment [COMMENT]] [--metafile[ |=]METAFILE]

DESCRIPTION
    Queries METAFILE (this file: $kit_META) for the CAUSE line in the TOPICS text
    below and prints the standard message on the current interface followed by
    an optional COMMENT if supplied.

TOPICS
    accessdenied
        Access Denied
    argumentnotfound
        Argument not found
    circularreference
        Circular reference (endless recursion)
    filenotfound
        File or directory not found
    functionnotfound
        Function not found
    invalidinput
        Invalid input
    invalidoperation
        Invalid operation
    notavailable
        Not available
    operationfailed
        Operation failed
    optionbad
        Unexpected or malformed option
    protectedtarget
        Target of operation is protected from alteration
    syntaxerror
        Syntax error (see help)
    unexpectedoption
        Unexpected option
    unspecified
        Unspecified cause

REVISED
    $_revised by docsalvager
"

fan_help="
fan CMD
    Fan control Not Yet Implemented
    Command(CMD):
        status
            Print whether fan is on or off, temperature(s), and fan speed(s)
            if available.
        start
            Force fan on.
        stop
            Force fan off.
REVISED
        20161207 by docsalvager
"

fileClose_help='
fileClose  [OPTION]  FILE
    Discontinue access to a FILE opened with fileOpen().
    Options:
        <none>
            Leave file intact.
        --purge
            Unconditionaly remove(delete) file (links to it will remain).
        --empty
            Unconditionally truncate the file (links will remain).
    Examples:
        To completely remove a file (leaves any symlinks
        that point to it, though they are broken for now)...
            fileClose --purge "$CACHE/$PROC.$PID"
        To remove just the contents of a file and thus leave it empty...
            fileClose --empty "$CACHE/$PROC.$PID"
REVISED
    20171111 by docsalvager
'

fileIn_help="
NAME
    fileIn - Print first directory in list where file can be created

SYNOPSIS
    fileIn FILENAME DIR...

DESCRIPTION
    Return dir/filename using first dir from given list where file could be created.

ARGUMENTS
    FILENAME
        Name of file to create.
    DIR...
        List of alternative directories, preferred first.
        If none exist that are writeable, use \$HOMEDIR ($HOMEDIR),
        which is assumed writable.

EXAMPLE
    FILEPATH=\$(fileIn archive.log /var/log \$HOME/log)

REVISED
    $_revised by docsalvager
"

fileListByTimestamp_help="
NAME
    fileListByTimestamp - List files by last-modified timestamp

SYNOPSIS
    fileListByTimestamp DIRECTORY

DESCRIPTION
    List files by last-modified timestamp to the nanosecond, oldest first.
    Use to determine order of file creation/modification.

ARGUMENTS
    DIRECTORY
        Full path to the directory of interest.

EXAMPLE
    fileListByTimestamp $CACHE

REVISED
    $_revised by docsalvager
"

fileLocal_help='
fileLocal  PATH
    Returns True(0) if PATH is on a local, mounted filesystem.
    Otherwise, returns False(1) indicating PATH was either not found or
    was found on a mounted remote filesystem.
REVISED
        20141116  docsalvager
'

fileOpen_help="
fileOpen  [OPTIONS... --] FILE
    Opens file...
        Creates file if it does not already exist.
        Creates any parent directories that do not already exist as well.
        Prints absolute-physical path of FILE.
    Options:
        --link[= ]NAME    Also create symbolic link NAME pointing to FILE
    Requires:
        mkdir
    Examples:
        To open an existing file...
            fileOpen \"\$CACHE/\$PROC.\$PID\"
        To open a new directory (no difference in call)...
            fileOpen \"\$CACHE/\$PROC.\$PID\"
        To open a new directory and create a symbolic link to it...
            fileOpen --link \"\$NAME\" -- \"\$CACHE/\$PROC.\$PID\"
    ToDo:
        - Add support for ...
            --mode=MODE    Set file mode (as in chmod), not a=rwx - umask
            --context=CTX  Set the SELinux security context of each created directory to CTX

REVISED
    20171111 by docsalvager

    See also:
        mkdir...

$(command mkdir --help)
"


fileFind_help="
NAME
    fileFind - Find files

SYNOPSIS
    fileFind OPTION...

DESCRIPTION
    Prints a list of files matching the criteria. Always follows symlinks.
    A sane wrapper around 'find' implementing only a few capabilities.

OPTIONS
    --in DIR
        Topmost directory to begin search. All subdirectories under this one
        will be searched.
    --name NAME | 'PATTERN'
        Print all filenames and/or directory names matching this globbing(wildcard)
        pattern.
    --recursive
        Search all subdirectories.

EXAMPLES
    kit --alt fileFind --in \"$DOC/lib/path2/name with spaces\"
      /home/DocSalvager/lib/path2/name with spaces
    kit --alt fileFind --in $DOC/lib/path2/'name with spaces'
      /home/DocSalvager/lib/path2/name with spaces
    kit --alt fileFind --in $DOC/lib/path2/path/to
      /home/DocSalvager/lib/path2/path/to
      /home/DocSalvager/lib/path2/path/to/backups
      /home/DocSalvager/lib/path2/path/to/backups/hourly_2016-05-03_a_05h26
      /home/DocSalvager/lib/path2/path/to/backups/hourly_2016-05-03_a_05h29
      /home/DocSalvager/lib/path2/path/to/backups/hourly_2016-05-03_a_05h25
    kit --alt fileFind --in $DOC/lib/path2 --name '.d*'
      /home/DocSalvager/lib/path2/to/.dirproperties
      /home/DocSalvager/lib/path2/to/backups/.dirproperties
      /home/DocSalvager/lib/path2/.dirproperties
      /home/DocSalvager/lib/path2/.dirproperties~

RELATED
    fileQuery

REVISED
    20180815 by docsalvager
"


fileEdit_help="
NAME
    fileEdit - Edit files

        {{{ NEW (20170926) -- NOT YET IMPLEMENTED               }}}

SYNOPSIS
    fileEdit SED-ARGUMENTS...

DESCRIPTION
    Modifies files using 'sed --regexp-extended'.
    Essentially, a wrapper around 'sed' that always uses certain options.

RELATED
    fileQuery

SED-ARGUMENTS
$(printAt 4 "$(command sed --help 2>&1)")

REVISED
    20171206 by docsalvager
"


fileQuery_help="
NAME
    fileQuery - Query and modify contents of files in an SQL-like way.

SYNOPSIS
    fileQuery OPERATION OPTION...

DESCRIPTION
    Manage configuration and other files using an SQL-like syntax.
        FROM
            is analogous to a SQL table
        WHERE
            is analogous to a SQL WHERE clause
        LIKE
            is analogous to a SQL LIKE  clause
        SET
            is analogous to a SQL SET   clause
        RESULTSET
            is analogous to a SQL result set but is a list of file paths
                FILES=\"\\
                    PATH/FILE
                    PATH/subdir/.../FILE
                \"
OPERATIONS
    --select
        Prints the complete line returned by 'grep' matching the
        WHERE clause in FILE files within FROM. If FROM is a directory,
        its subdirectories are also searched recursively.
            --where|--where-not|--where-regex WHERE
                optional
            --like LIKE
                optional
            --set SET
                ignored
    --select with-filename
        Same as '--select' alone, but prepends each line with the full file path
            --where|--where-not|--where-regex WHERE
                optional
            --like LIKE
                ignored
            --set SET
                ignored
    --insert
        Inserts SET string (e.g. a property) into list of FILE files
        in PATH and subdirectories.
            --where|--where-not|--where-regex WHERE
                optional (without it, inserts into the one PATH/FILE only)
            --like LIKE
                ignored
            --set SET
                required
    --update
        Updates first LIKE string with SET string (e.g. a property) in list
        of FILE files in PATH and subdirectories containing the WHERE string.
            --where|--where-not|--where-regex WHERE
                required
            --like LIKE
                required
            --set SET
                required
    --delete
        Deletes ** each line ** matching the --where* clause(s) from list of FILE
        files in PATH and subdirectories.
            --where|--where-not|--where-regex WHERE
                required
            --like LIKE
                ignored
            --set SET
                ignored

OPTIONS
    ---from \"PATH/FILE\"
    ---into \"PATH/FILE\"
        '--into' is just a synonym for --from as in...
            fileQuery --insert --into ...
        FILE is the file in PATH to be selected or altered.
        PATH is the starting (parent) directory in which to search for FILEs
        containing matches in this and all subdirectories of PATH. Defaults to
        current logical working directory if not supplied...
          (currently $PWD)
        Supports filename \"globbing\" wildcards.
        If wildcarded, must be single or double quoted to prevent premature globbing.
        If FROM is a file...
            only that file is searched,
        If FROM is a directory...
            all files in the directory and its subdirectories are searched
        If FROM contains a globbing expression...
            all files in the PATH directory (which could also be globbed) matching
            the glob as well as its subdirectries are recursively searched.
    [--where \"WHERE\"]
        Effects only FILEs containing the WHERE string.
        Matches fixed strings (grep -F).
    [--where-not \"WHERE\"]
        Effects only FILEs NOT containing the WHERE string.
        Matches fixed strings (grep -F).
    [--where-regex \"WHERE\"]
        Effects only FILEs NOT containing the WHERE string.
        Matches Extended Regular Expression (grep -E) matching.
    [--like \"LIKE\"]
        In a --select...
            Returns only the substring LIKE in each row(line) returned.
        In an --update...
            Replaces every string matching LIKE
        (Both forms use Extended Regular Expression (grep -E) matching.)
        ---
        FORMERLY defined by the 'awk' command, which must be in single-quotes, as in...
            fileQuery --select 'BEGIN{FS=\":\"} {print \$2\":\"\$3}' --from \"\$_fstab\"
        For the input data...
            /etc/fstab:device:\"text to end of line\"
        Returns...
            device:\"text to end of line\"
    [--set \"SET\"]
        Required for --insert and --update opertions.
        String to replace LIKE string in an --update or
        string to append to FILE in an --insert.
    [--quiet]
        No prompting for confirmation.

NOTES
  Escape '--...' as in \"\--source\"
      If first character of an option argument is a hyphen(-), escape it to
      prevent it being taken as another --option.
  Format of select output is...
      /_path/_file:<property>=<value>
      /_path/<subdir>/_file:<property>=<value>
          :
  20170418  [ABANDONED] the --connect option for now
      Remote --select worked fine, but --update got quite complicated.
      Preserve these notes...
          [--connect \"CONNECT\"]
            Optional connect string for querying a remote host.
            Example:
                fileQuery --connect \"ssh DOCSAL\" --select ...

EXAMPLES
    _hits=\"\$(fileQuery --select --from \"\$_lpath/.properties\" --where \"MASTER=\$_lhost\")\"
    _result=\"\$(
        fileQuery --update
            --path  \"\$_lpath\"
            --file  \".dirproperties\"
            --where \"MASTER=\$_lhost\"
            --like  \"syncPull_LAST=.*\"
            --set   \"syncPull_LAST=\$(timeDate)\"
    )\"

EXAMPLE directory/.properties entries
    MASTER...
        If directory .../etc/path/.properties on host LX03 contains
            MASTER=LX03
        it is the master and its contents should never be replaced
        by syncPull, etc.
    SLAVE (backup)...
        If directory .../etc/path/.properties on host LX03 contains
            SLAVE=LX01
        it is a slave and its contents can always be replaced
        by syncPull, etc.

REQUIRES
    grep

REVISED
    $_revised by docsalvager
"


fileRevised_help="
fileRevised  FILE
    Prints FILE's last modification(revision) date in MM/DD/YYY HH:MM:DD format.
    Requires:
        date --reference
REVISED
        20170329 by docsalvager
"


fileSelect_help="
NAME
    fileSelect - Query and modify contents of files in an SQL-like way.

SYNOPSIS
    fileSelect [OPTION...]

DESCRIPTION
    Yad or Zenity file selection dialog (for GUI only). All options are passed
    to Yad or Zenity. Yad is preferred if available.
    Yad:
        File selection options (from yad --help-file-selection)
          --filename=FILENAME                         Set the filename
          --multiple                                  Allow multiple files to be selected
          --directory                                 Activate directory-only selection
          --save                                      Activate save mode
          --separator=SEPARATOR                       Set output separator character
          --confirm-overwrite=[TEXT]                  Confirm file selection if filename already exists
          --file-filter=NAME | PATTERN1 PATTERN2 ...  Sets a filename filter
        General options
          --title=TITLE                               Set the dialog title
          --window-icon=ICONPATH                      Set the window icon
          --width=WIDTH                               Set the width
          --height=HEIGHT                             Set the height
          --geometry=WxH+X+Y                          Set the window geometry
          --timeout=TIMEOUT                           Set dialog timeout in seconds
          --timeout-indicator=POS                     Show remaining time indicator (top, bottom, left, right)
          --text=TEXT                                 Set the dialog text
          --image=IMAGE                               Set the dialog image
          --image-on-top                              Show image above main widget
          --icon-theme=THEME                          Use specified icon theme instead of default
          --button=NAME:ID                            Add dialog button (may be used multiple times)
          --no-buttons                                Do not show buttons
          --no-markup                                 Do not use pango markup language in dialog text
          --dialog-sep                                Add separator between dialog and buttons
          --always-print-result                       Always print result
          --sticky                                    Set window sticky
          --fixed                                     Set window unresizable
          --on-top                                    Place window on top
          --center                                    Place window on center of screen
          --mouse                                     Place window at the mouse position
          --undecorated                               Set window undecorated
          --skip-taskbar                              Do not show window in taskbar
          --kill-parent                               Send TERM to parent
    Zenity:
        File selection options (from zenity --help-file-selection)
          --filename=FILENAME                         Set the filename
          --multiple                                  Allow multiple files to be selected
          --directory                                 Activate directory-only selection
          --save                                      Activate save mode
          --separator=SEPARATOR                       Set output separator character
          --confirm-overwrite=[TEXT]                  Confirm file selection if filename already exists
          --file-filter=NAME | PATTERN1 PATTERN2 ...  Sets a filename filter
        General options
          --title=TITLE                               Set the dialog title
          --window-icon=ICONPATH                      Set the window icon
          --width=WIDTH                               Set the width
          --height=HEIGHT                             Set the height
          --timeout=TIMEOUT                           Set dialog timeout in seconds

REVISED
    20180511 by docsalvager
"


fileShow_help="
fileShow FILE
    Show a text FILE in dialog window.
REVISED
        20170309 by docsalvager
"


fileUpdate_help="
NAME
    fileUpdate - Archive, then update a target file from a source file

SYNOPSIS
    fileUpdate [--source] FILE [--targetdir TARGETDIR]

DESCRIPTION
    If FILE already exists in TARGETDIR, archives it and the replaces it with
    the one in the source path. Returns true(0) if successful or false(1)
    if cancelled or unsuccessful.

OPTIONS AND ARGUMENTS
    --source FILE
        The (required) source file path. If no '--source' keyword is supplied,
        the first argument is taken to be the source file.
    --targetdir TARGETDIR
        Optional target directory that will be presented first in the selection
        list along with those persistantly cached in \$HOMEDIR/cache/fileUpdate.
        The selected one will be added to the cached list if not already there.

REQUIRES
    archive (kit-based)

REVISED
    $_revised by docsalvager
"

fileList_help="
NAME
    fileList - List files and directories safely (escapes spaces and nonprintables)

SYNOPSIS
    fileList [--file|--dir|--pipe|--sock|--all] [FILES]

DESCRIPTION
    List the names of files and directories safely by converting spaces,
    newlines and other nonprintable characters in filenames to standard escape
    sequences (\n, \t, ...) and octal escapes (\000, \177, ...). If no FILES
    given, defaults to current directory.

OPTIONS
    --all
        All files and directories. (default)
    --dir
        Directories only.
    --pipe
        Named pipes only.
    --file
        Regular files only (executable or not).
    --sock
        Sockets only.

REPLACES
    files() and filesList().

REVISED
    $_revised by docsalvager
"

fnInit_help="
NAME
    fnInit - Function initialization handling all common options

SYNOPSIS
    fnInit FUNCTIONNAME[.UPDATED] \"\$@\" [--help-text=\"...\"]

DESCRIPTION
    As the first thing executed by each and every function, fnInit() implements
    much of the basic support infrastructure on which kit is based. This is
    where capabilities common to all functions are encapsulated. Trys to prevent
    circular references by monitoring the function stack.

    FUNCTIONNAME is the name of the function and is required.

    .UPDATED is optional (and preferred) and is the date the function or its
    documentation was last modified. It must be in the format .YYYYMMDD. Thus,
    the call to fnInit in the dialog() function might look like...
        fnInit \"\$FUNCNAME.20190330\" \"\$@\"  && return 0

OPTIONS (from calling function arguments (\"\$@\"):
    --help
        Show help.
    --help-all
        Interactive GUI to select help for any function.
    --help-text=\"...\"
        Inline multiline help text inside double quotes is processed by
        'eval' as in notes and help read from \$METAFILE, currrently ...
            $METAFILE
        This allows inclusion of commandline help and programmatic
        formatting. Embedded quotes must be escaped as required by bash.
        (enclosure in single-quotes DEPRECATED beginning with kit-040 version)
    --inspect
        Show diagnostics - Level 1.
    --inspect1
        Show diagnostics - Level 1.
    --inspect2
        Show diagnostics - Level 2.
    --note-all
        Interactive GUI to select a note from the METAFILE.
    --version
        Show version number.
        To capture in a script...
            VAR=\"\$(kit-based-script --version --CLI)\"

RETURNS
    true(0)
        All done. Do not continue with rest of calling function.
    false(1)
        Not done. Continue executing rest of calling function.

EXAMPLES
    First line of a function normally is...
        fnInit \${FUNCNAME} \"\$@\"  && return 0
    First line of a function with inline --help-text...
        fnInit \${FUNCNAME} \"\$@\" --help-text=\"
          :
        \" && return 0

REVISED
    $_revised by docsalvager
"

fnList_help="
NAME
    fnList - List function names

SYNOPSIS
    fnList [--pfx=STRING]

DESCRIPTION
    List function names.
        VAR=\"\$(fnList)\"          fnList of all function names
        VAR=\"\$(fnList --pfx=a)\"  fnList of only function names starting with \"a\"

REVISED
    $_revised by docsalvager
"

fnOptions_help='
fnOptions "$@"
    Echos first function in list of arguments and treats all remaining arguments
    as options and arguments to the function. Thus all options must begin with
    the "--" prefix. The first non-option argument is the function.
REVISED
        20140915  docsalvage
'

fnShow_help="
NAME
    fnShow - Print in-memory representation of function (no comments)

SYNOPSIS
    fnShow FUNCTIONNAME

DESCRIPTION
    Show bash's in-memory representation of the function FUNCTIONNAME.
    This will be stripped of comments.
    For help with code idioms, see
      http://mywiki.wooledge.org/BashGuide/TestsAndConditionals#Grouping_Statements.

REVISED
    20180212 by docsalvager
"

fnTrace_help='
fnTrace FUNCTIONNAME ARGUMENTS
    Show information about function FUNCTIONNAME, including its ARGUMENTS.
    Arguments:
        FUNCTIONNAME
            Usually the bash-maintained variable $FUNCNAME/${FUNCNAME[0]}
        ARGUMENTS
            Usually "$@"
    Example:
        fnTrace ${FUNCNAME} "$@"
REVISED
        20140916  docsalvager
'

fsMount_help="
NAME
    fsMount - Mount/unmount a filesystem (per /etc/fstab) w/ sshfs support

SYNOPSIS
    fsMount

DESCRIPTION
    Mount or unmount a filesystem defined in the local /etc/fstab file.
    If the filesystem is unmounted, on confirmation it will be mounted.
    If the filesystem is already mounted, on confirmation it will be unmounted.

ARGUMENTS
    None. Presents a list of mountable filesystems.

REVISED
    20181129 by docsalvager
"

grepFor="
NAME
    grepFor - Options are named macros of common grep searches

SYNOPSIS
    grepFor OPTION

DESCRIPTION
    Options are named macros of common grep searches.

OPTIONS
    --nocomments FILES
        Prints the lines in one or more FILES that are not comments (start with #)
        or blank.
    --sort
        Sort the results.

REVISED
    20190104 by docsalvager
"


gtkActionsGen_help="
NAME
    gtkActionsGen - Debug - Generate GtkDialog <action>s

SYNOPSIS
    gtkActionsGen

DESCRIPTION
    Debug - Generate GtkDialog <action>s that echo names
    of all event signals when received by this widget.
        '\"\$(gtkActionsGen vbox.frame.entry.GTKDIALOG_PID)\"'
    Signals:
        activate
        button-press-event
        button-release-event
        changed
        clicked
        configure-event
        cursor-changed
        delete-event
        destroy-event
        file-changed
        focus-in-event
        focus-out-event
        hide
        key-press-event
        key-release-event
        map
        map-event
        primary-icon-press
        primary-icon-release
        realize
        row-activated
        secondary-icon-press
        secondary-icon-release
        show
        toggled
        unmap-event
    Signals Ignored to avoid exceeding max data size of bash
    which, when exceeded, results in no event debug output:
        enter-notify-event
        leave-notify-event

REPLACES
    genSignalsDebug

REVISED
    20180404 by docsalvager
"

gtkDirSelect_help='
gtkDirSelect [ --start={directory} ] [ --msg="text" ]
    To reset positional parameters passed to the script or a function
    to file selection in yad --file-selection starting at /etc
    and showing the message "Select config file"...
        eval set -- $(guiDirSelect --start="/etc" --msg="Select config file")
    OBSOLETE:
        20160723  Replaced by fileSelectShow()
REVISED
        20160425 by docsalvager
'

gtkError_help='
gtkError MESSAGE
REVISED
        20150906  docsalvager
'


gtkExec_help="
NAME
    gtkExec - Execute a command

SYNOPSIS
    gtkExec [ [--regex] REGEX] [OPTIONS]

DESCRIPTION
    Select a command to execute from the history file or enter a new one, which
    will be added to the history file.

OPTIONS
    [--regex] REGEX
        Optional Extended Regular Expression filter of cached commands.
    [--title TITLE]
        Window title.

FILES
    Cached commands...
      $HOMEDIR/cache/gtkExec

DERIVED FROM
    pExec dash script by lguleder at...
        http://murga-linux.com/puppy/viewtopic.php?p=546147

REVISED
    $_revised by docsalvager
"


gtkInfo_help="
NAME
    gtkInfo - Show a message.

SYNOPSIS
    gtkInfo [--text] MESSAGE [--title TITLE]

REVISED
    20170427 by docsalvager
"


gtkLogStatus_help='
gtkLogStatus MESSAGE
    Write MESSAGE to log file and show in a dialog.
REVISED
        20150906  docsalvager
'

gtkNotify_help="
NAME
    gtkNotify - Send notifications

    --- IN DEVELOPMENT ---

SYNOPSIS
    gtkNotify

REVISED
    20180119 by docsalvager
"


gtkProgress_help="
... | gtkProgress [OPTION...]
    Show approximate progress of operation with a progress bar that is driven by
    input from stdin only.
    Options:
        --title
            Optional window title.
        --text
            Optional dialog text.
        --max
            Optional maximum value for progress bar. Defaults to 100.

    Zenity Experiments ========================================================

    DO NOT DISCARD THIS DOCUMENTATION!!!
    Use to write articles.

    To produce a pulsating progress bar and capture the result of a command
    (pulsating due to no continuous input to track the progress of)...
      RESULT=\$( command | tee >(gtkProgress \"Text to display...\") )

    A bug in zenity prevents pulsating unless it gets some kind of input so
    we introduce an 'echo' into the input stream with...
      cat <(echo) - | tee >(...)
    See PROBLEM and EXPERIMENTS below

    PROBLEM
    Get zenity progress bar to pulsate and to pass string thru intact

    EXPERIMENTS LEGEND
    First Y/N  = pulsates; Second Y/N = passed string intact
    A lowercase y/n means it partially worked.
    Thus, from failure to success would be: N, n, y, Y

    40 DOCUMENTED EXPERIMENTS...
    YN: tee >(echo) | tee  >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: echo | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: tee echo \"10\" | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    YN: tee >(echo \"10\") | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: cat | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: tee >(echo; zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: tee echo | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    nY: >(echo) | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    nY: >(echo; sleep 1) | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    nN: >(echo \"20\") | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: >(cat) | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: tee >(cat) | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill
    NY: >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: >(echo) > >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: >(echo) >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: echo >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: echo tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    nN: cat - | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: >(cat -) | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    N-: cat tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: echo | zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill <(echo)
    NY: >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill) <(echo)
    NY: >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill) <(echo -n)
    NY: >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill) <(printf \"\")
    NN: tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill) <(printf \"\")
    YN: tee >(echo \"\") | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: >(echo \"\") | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: tee | tee >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NN: tee >(echo) >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: tee >(echo) | >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    --: tee (echo) | >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: tee >(echo \"\") | >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: tee >(echo) | >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    NY: tee >(echo; echo) | >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    nY: tee >(echo) | >(echo | zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)
    yY: >(echo | zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill)

    per http://ubuntuforums.org/showthread.php?t=686757
    nY: exec 3>&1 >(zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill); tee 1>&3; exec 3>&-

    [SOLVED (mostly)]
    YY: cat <(echo) - | zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill

    20110910-20110918
    cat <(echo) - | zenity --progress --pulsate --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill
    cat <( ((++i)); echo \"\$((\$i / \$#))\"; sleep 1; ) - | zenity --progress --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill
    cat <( awk -v LAST=\$LASTMAX '\"'\"'{ print NR%100 \"\n\" \"# \" NR \" of \" LAST \": \" \$0 \"\n\" }'\"'\"'; sleep 1; ) - | zenity --progress --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill --width=900
    cat <( awk -v LAST=\$LAST -v MAX=\$MAX '\"'\"'{ print \"\" MAX>0?((NR/MAX)*100):(NR%100) \"\n\" \"# \" NR \" of \" LAST \": \" \$0 \"\n\" }'\"'\"'; ) - | zenity --progress  --width=\"900\" --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill
    cat <( awk -v LAST=\$LAST -v MAX=\$MAX '\"'\"'{ print ((NR/MAX)*100)%100  \"\n\" \"# \" NR \" of \" LAST \": \" \$0 \"\n\" }'\"'\"'; ) - | zenity --progress  --width=\"800\" --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill

    20110919 These work but not fully functional
    awk -v MAXTXT=\$MAXTXT -v MAX=\$MAX '\"'\"'{ print ((NR/MAX)*100)%100  \"\n\" \"# \" NR \" of \" MAXTXT \": \" \$0 \"\n\" }'\"'\"' | tee -a \$LOGFILE | zenity --progress  --width=\"800\" --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill
    awk -v MAXTXT=\$MAXTXT -v MAX=\$MAX '\"'\"'{ print ((NR/MAX)*100)%100  \"\n\" \"# \" NR \" of \" MAXTXT \": \" \$0 \"\n\" }'\"'\"' | tee >(zenity --progress  --width=\"800\" --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill) | grep --count ^#
    awk -v MAXTXT=\$MAXTXT -v MAX=\$MAX '\"'\"'{ print ((NR/MAX)*100)%100  \"\n\" \"# \" NR \" of \" MAX \": \" \$0 \"\n\" }'\"'\"' | tee >(zenity --progress  --title=\"\$TITLE\" --text=\"\$TEXT\" --auto-close --auto-kill) | grep --count ^#
    awk -v MAX=\$MAX '\"'\"'{ print ((NR/MAX)*100)%100  \"\n\" \"# \" NR \" of \" MAX \": \" \$0 \"\n\" }'\"'\"' | tee >(zenity --progress  --title=\"\$TITLE\" --text=\"\$TEXT\" --width=\"800\" --auto-close --auto-kill) | grep --count ^#


    STEP-BY-STEP PROGRESS DIALOG

    Uses zenity to show a progress bar dialog that advances for each string
    fed to it on stdin. First characters of the string are displayed above the
    bar prefixed with a count. stdin is re-echoed to stdout for further
    processing such as to capture output.

    NOTE: The piping and process substitution specifics are absolutely critical to make this work!

    OPTIONS
      -m {number}   Maximum value of progress bar. Defaults to 100.
                    If even an approximation of this can be supplied,
                    progress of the bar will more closely match reality.

    The process...

    - awk...
    Prepend a record count to the input string.
      - each string (text between \"\") is treated by awk as a record
      - (NR/MAX)*100)%100 calculates what percentage to advance the bar
        - 'zenity --progress' takes stdin input like the following...
            1
            # string such as a filename
            2
            # string such as a filename
            :
            90
            # string such as a filename
            99
            # string such as a filename
        - The first of the two lines per input string is the percentage to
          advance and the second line is '#' followed but the text to display
    - | tee
    Pipe awk output to 2 processes by duplicating it with 'tee'.
      - 'tee' outputs to both a file and to stdout
        whatever input it gets from the pipe.
      - to prevent dealing with creating and destroying a tmp file, we
        use Process Substitution to direct the output destined for a file
        instead to our zenity process.
      - the copy of the output going to stdout is automatically passed back
        to the calling function where it can be displayed or captured as in
          RESULT=\$(ls | guiProgress -m 400 \"Listing files...\")
    --text=\"\$(echo $TEXT | cut --characters=-160)...\"
    Limit displayed text to what will fit in the window.
      - 'zenity --progress' bombs if it tries to display too much much text.
      - there is no apparent limit on the amount it can be fed, just how much
        can be displayed.

    ===========================================================================

    Resources
        http://wiki.bash-hackers.org/howto/redirection_tutorial
        http://wiki.bash-hackers.org/syntax/expansion/proc_subst?s[]=process
        http://library.gnome.org/users/zenity/stable/zenity-usage.html.en
        http://stanley-huang.blogspot.com/search/label/Zenity
REVISED
    $_revised by docsalvager
"


gtkQuestion_help="
NAME
    gtkQuestion - Ask yes/no (true/false) question.

SYNOPSIS
    gtkQuestion [OPTIONS]

DESCRIPTION
    Show a message in a dialog and accept okay/cancel answer.

OPTIONS
    [--text] MESSAGE
        Required quoted message text. If first option, '--text' is optional.
    --title
        Optional title. Defaults to 'kit'.
    --width
        Optional width in pixels. Defaults to 200.

REVISED
    $_revised by docsalvager
"

gtkSpinner_help="
NAME
    gtkSpinner - Display the busy wait animated spinner icon.

SYNOPSIS
    gtkSpinner [OPTION...]

DESCRIPTION
    Display the busy wait animated spinner icon.
    Prints PID of the backgrounded gtkdialog process upon launch.
    Use PID to kill the gtkdialog process on resumption of processing.

OPTIONS
    --stop PID
        Kills PID process.
    --tip
        Tooltip text displayed on hover.
    --icon
        Image file (usually and animated GIF) to display as the spinner.

REQUIRES
    GtkDialog 0.8.3 (gtkdialog4)
    gtk2desklet module

REVISED
    $_revised by docsalvager
"

gtkWarning_help='
gtkWarning [OPTION] MESSAGE
    Show warning message dialog.
    Options:
        --title
            Title name.
REVISED
    20171111 by docsalvager
'

helpAll_help="
NAME
    helpAll - GUI dialog select function help

SYNOPSIS
    helpAll [--pfx PREFIX]

DESCRIPTION
    Show picklist of notes. Double-click on note for help with function.
    GUI-only. Uses fnList for list of functions (CLI or GUI). If subject
    ends with '__macro', a command list will be invoked via 'eval' to
    perform additional processing such as launching another GUI tool.

OPTIONS
    --pfx=PREFIX
        List only note topics starting with PREFIX.

TODO
    - Use fnShow to show function help text (CLI or GUI)?
    - Add an intermediate confirmation before running macros.

REVISED
    20180111 by docsalvager
"

helpCmd_help="
helpCmd COMMAND
    Prints help text for an external command if any found.
    Return true(0) if help found. Otherwise, false(1).
    Tries option formats in the order...
        COMMAND --help                  (new, long  option format)
        COMMAND -h                      (old, short option format)
        help COMMAND                    (bash builtin command format)
REVISED
    20180112 by docsalvager
"

helpHtml_help='
helpHtml HTMLFILE
    If given an HTML file (*.html), opens file with defaultbrowser.
    Opens HTMLFILE with defaultbrowser. Returns exit code from defaultbrowser.
REVISED
        20150327 docsalvager
'

inArray_help='
inArray FIND ARRAY  && ...
    Returns true(0) if FIND is an element of the array ARRAY.
    Example:
        inArray "--title" "${ARGS[@]}" && echo "Option: --title"
    Resources:
        http://mywiki.wooledge.org/BashFAQ/006
        http://www.linuxjournal.com/content/bash-associative-arrays
        http://stackoverflow.com/questions/1063347/passing-arrays-as-parameters-in-bash
        http://stackoverflow.com/questions/16461656/bash-how-to-pass-array-as-an-argument-to-a-function
REVISED
        20140923  docsalvager
'

inCLI_help="
inCLI  && ...
    Return true(0) if user interface ($UI) is set to 'CLI'. Otherwise, false(1).
    Dialog output is directed to normal command line standard out (stdout).

REVISED
    20190106 docsalvager
"

inGUI_help="
inGUI  && ...
    Return true(0) if user interface ($UI) is set to 'GUI'. Otherwise, false(1).
    Dialog output is directed to a popup (YAD) graphical user interface window.
REVISED
    20190106 docsalvager
"

inLOG_help="
inLOG  && ...
    Return true(0) if user interface ($UI) is set to 'LOG'. Otherwise, false(1).
    Dialog output is directed to the log file ($LOGFILE).

REVISED
    20190106 docsalvager
"

inInspect_help='
inInspect "$@"  && ...
    Return true(0) if in "inspect" mode ("$INSPECT" is non-null).
    Replaces:
        isInspect
REVISED
        20150113  docsalvager
'

include_help='
include file
    Enforce requirement that "sourced" files be in same directory as caller.
      file      Name of a file in the same directory as this script containing
                bash code to be sourced. Usually a library of functions.
    Requires pathName().
'

indentStr_help='
indentStr STRING
    Echos the leading spaces of the STRING.
REVISED
        20141228  docsalvager
'

inputCli_help="
NAME
    inputCli - Accept keyboard input on command line (CLI)

SYNOPSIS
    inputCli [[--prompt] PROMPT]

DESCRIPTION
    Optionally, PROMPT is printed to /dev/tty (the comandline). Then input is
    accepted from commandline until pressing ENTER key.

OPTIONS
    [--prompt] PROMPT
        Print the prompt string to the commandline.

WARNING
    WAITS INDEFINITELY FOR INPUT
        and since there is no builtin prompt,
        a syntax error could appear to be a script hang

EXAMPLE
    printf \"%s\" \"Enter your input: \"
    _input=\"\$(inputCli \"Enter your input: \")\"

REVISED
    20180511 BY docsalvager
"

inspArgShow_help="
inspArgShow
    Show arguments in GUI dialog using inspArg().
REVISED
        20160817 by docsalvager
"

inspArg_help='
inspArg "$@"
    Print arguments.
REVISED
        20160226  docsalvager
'

inspCaller_help='
inspCaller "$(caller 0)"
    Print the calling function.
    Example:
        _callerstr="$(inspCaller "$(caller 0)")"
REVISED
        20160226  docsalvager
'


inspFn_help="
NAME
    inspFn - Print 1 line diagnostic of function call

SYNOPSIS
    inspFn FUNCTION \"\$@\"

DESCRIPTION
    Prints single line diagnostic of FUNCTION being executed prefixed with the
    approximate number of milliseconds (0.000secs) since the previous call
    to inspFn() (see Notes below).

EXAMPLE
    Called from fnInit where \"\$1\" is the name of the function that called fnInit
        [[ \"\$INSPECT\" ]]  && {
          _argsline=\"\$(builtin echo \$*)\"
          inspFn \"\$1\" \"\${_argsline:0:\$INSPFRAGLEN}\" >>\"\$INSPFILE\"
          TIMELAST=\"\$(timeMs)\"
        }

NOTES
    local _timenow=\"\$(dateMs)\"    ### time in milliseconds since epoch
    local _timelapse=\"\$TIMELAPSE\" ### time in milliseconds since epoch of last call
      ### Note that this copy of \$TIMELAPSE is local since inspFn()
      ### is usually called via command-substitution (e.g. in a subshell)
      ### For approximate elapsed time between calls to this function,
      ### \$TIMELAPSE must be reset in the calling function
       :
    _timelapse=\$((_timenow - _timelapse))
      ### Per bash manpage... Arithmetic Expansion \$((...)), ARITHMETIC EVALUATION ...
      ###   \"\$\" is optional
      ###   Variables may be strings or integers but always interpreted as integers
      ###   Null variables interpreted as integer 0

REVISED
    $_revised by docsalvager
"

inspFnStack_help="
NAME
    inspFnStack - Hierarchial listing of function calls to this point

SYNOPSIS
    inspFnStack

DESCRIPTION
    Hierarchial listing of succession of function calls to this point.

EXAMPLE
    inspFnStack >&2

REPLACES
    callStack

REVISED
    $_revised by docsalvager
"

inspFnLineage_help="
NAME
    inspFnLineage - Print complete call path to function

SYNOPSIS
    inspFnLineage ARGUMENTS

DESCRIPTION
    Prints complete call path to function along with all arguments to stderr...
      .main.function1.function2...
          arg2
          arg2
           :

EXAMPLE
  [[ \"$INSPECT\" > \"1\" ]]  && { inspFnLineage \"\$@\"; }

REVISED
    20190222 by docsalvager
"

inspFnStackItem_help="
NAME
    inspFnStackItem - Formats data a bash function array item for output

SYNOPSIS
    inspFnStackItem LEVEL

DESCRIPTION
    Formats data a bash function array item for output.

EXAMPLE
    _text+=\"| \$i \${T}\$(inspFnStackItem \$i)\n\"

REVISED
    $_revised by docsalvager
"

inspFnStackTop_help='
inspFnStackTop
    Prints the index number of the top item in the bash-maintained function
    stack array FUNCNAME[]. ${FUNCNAME[$(inspFnStackTop)]} will always be either
        main
          if ...
    Example:
        inspFnStack >&2
    Replaces:
        callStack
REVISED
       20150113  docsalvager
'

inspVarShow_help="
inspVarShow --all | VAR...
    Show one or more variables in GUI dialog using inspVar().
REVISED
        20180815 by docsalvager

GUI OF
$( printAt 4 "$(noteFind inspVar)" )
"

inspVar_help="
NAME
    inspVar - Print values of one or more variables

SYNOPSIS
    inspVar --all
    inspVar --func        [VARIABLE...]
    inspVar --pfx PREFIX
    inspVar --script      [VARIABLE...]
    inspVar [[--var]       VARIABLE...]

DESCRIPTION
    Print variables and their values formatted for debugging.
    Multiline variables are printed with line numbers.

OPTIONS
    --all
        Print all variables declared(created) up to this point and within the
        current scope. Includes inherited environment variables but does not
        include local variables in other functions as they are outside the
        current scope and thus inaccessible.
    --func [VARIABLE...]
        Prints...
          - any optional VARIABLEs given
          - the Bash environment variable \$_ used for temporary values
          - all variables with names starting with '_'
        By script standard...
          - the '_' prefix is reserved for local function variables
          - the \$__ variable is used for intermediate values
    --pfx PREFIX
        Print variables declared(created) up to this point as with the --all
        option but only print those whose names start with PREFIX. Includes
        inherited environment variables.
    --script
        Same as --all except external environment variables are excluded.
    [--var] VARIABLE...
        Print just the one or more variables listed which can include environment
        variables. '--var' is optional if a VARIABLE name is the first argument.

NOTES
    \"\$(compgen -v PREFIX)\"  and  \"\${!PREFIX@}\"
        The bash Parameter Expansion, \"\${!PREFIX@}\" (double-quotes required),
        is functionally equivalent to \$(compgen -v PREFIX) without quotes. Both
        produce a list of the declared variables with names having the PREFIX
        character(s) as their prefix. This can be used to generate a list of
        variables that will not have be updated every time a new variable with
        that prefix is added. Usually used for function local variables prefixed
        with the underscore. For example...
            inspVar \"\${!_@}\"

EXAMPLES
    inspVar --all
        Prints all declared variables with their values declared up to this point
        including inherited environment variables.
    inspVar --script
        Prints all variables declared in the script with their values. Like --all
        but excludes environment variables.
    inspVar --func HOMEDIR UI
    inspVar HOMEDIR UI \"\${!_@}\"
        Prints the \$HOMEDIR and \$UI variables plus all variables with a '_' prefix.
    inspVar --pfx kit_
        Prints variables with the 'kit_' prefix.
    inspVar CHANGES TODO UI
    inspVar --var CHANGES TODO UI
        Prints the variables CHANGES, TODO, and UI with their values.

REVISED
    $_revised by docsalvager
"


inspectShow_help='
inspectShow "$@"
    Show diagnostics, callstack, bash settings
    and bash options to current user interface.
    Example:
        isInspect "$@"  && inspectShow "$@"
REVISED
        20160911 by docsalvager
'

inspect_help="
NAME
    inspect - Print accumulated kit diagostics from this run

SYNOPSIS
    inspect \"\$@\"

DESCRIPTION
    Show GTK Inspector, diagnostics, callstack, bash settings and bash options.

NOTES
    Much of the setup for inspect() is done in ___init().

EXAMPLE
    dialog --title=\"Inspect Diagnostics\" -- \"\$(inspect \"\$@\")\"

BUG
    meta inspect
    inspect --help
        Each of these invocations also executes 'inspect'. It's as if the
        '--inspect' option were supplied. Probably caused by the change in
        'optionArg' to allow both 'option' and '--option' syntax.
        20171026
            Diagnosed but no clear way to fix without breaking other
            functionality. Since no harm done, calling it a \"demo\" for now.

REVISED
    $_revised by docsalvager
"

inspectRevisions_help="
NAME
    inspectRevisions - List all functions by REVISION date per the METAFILE

SYNOPSIS
    inspectRevisions [OPTION...] [METAFILE]

DESCRIPTION
    List all functions in METAFILE (default is $kit_META) with their REVISION date.
    Function names are restricted to variable name limits (i.e. [_A-Za-z0-9]).
    Default order is the order within the file. List format is...
        YYYYMMDD FUNCTION_NAME
    Where...
        YYYYMMDD      last revision date
        FUNCTION_NAME function names adhering to variable name format

OPTIONS
    --sorted-by-name | --sorted | --reverse
        --sorted-by-name
            List sorted by variable name. In kit.meta, these are the *_help,
            *_color, and * (no suffix on command meta data).
        --sorted
            List sorted by REVISED date.
        --reverse
            List sorted by REVISED date in reverse order.
    --recent | --oldest
        --recent [NUM]
            List only the NUM revised most recently. Defaults to NUM=20.
        --oldest [NUM]
            List only the NUM revised least recently. Defaults to NUM=20.
    --search FUNCTION
        List only the function named FUNCTION. Multiple functions can be listed
        by using extended regular expressions with a partial function name such as...
            inspectRevisions --search '___init.*'
        Lists the revision dates for...
            ___init
            ___initUIDLG

EXAMPLES
    [root@LX03:~/lib] kit --alt inspectRevisions --sorted-by-name --recent 10 --reverse
    20171028      12  FILE_kit_meta
    20171015    1714  fsMount_help
    20171028    2313  inspectRevisions_help
    20171026    2286  inspect_help
    20171010    2538  isNoOptions_help
    20171010    2569  isOption_help
    20171026    2732  kit_help
    20171028    4549  readarray
    20171015    4994  xsltproc
    20171028    5149  zenity

REVISED
    $_revised by docsalvager
"

insureDir_help="
NAME
    insureDir - Create directory if it does not exist

SYNOPSIS
    insureDir DIR

DESCRIPTION
    Create directory DIR if it does not exist. Returns true(0) if exists or created.

EXAMPLE
    if insureDir ~/foo

REVISED
    $_revised by docsalvager
"

insureFile_help='
insureFile FILE_PATH_NAME
    Create empty file if it does not exist. Returns true(0) if exists or created.
    Example:
        if insureFile ~/foo/bar
REVISED
        20140915 docsalvager
'

isAnOption_help='
isAnOption ARGUMENT
    Return true (0) if ARGUMENT is an option (has 2 leading hyphens).
    Example:
        isAnOption "$1"  && ...
REVISED
        20160726 by docsalvager
'

isArgsNone_help='
argsNone "$@"
    If no arguments, returns 0 (true). Otherwise, returns 1 (false).
    Replaces:
        argsNone
REVISED
        20140915 docsalvage
'

isCommand_help='
isCommand WORD
    Return true(0) if WORD is a command. Otherwise, false(1).
    (i.e. type -t returns one of: alias builtin file function keyword).
REVISED
        20160121 docsalvager
'

isDirExists_help='
isDirExists DIR
    True if directory DIR exists and is a directory.
REVISED
      20150306  docsalvager
'

isDirWrite_help='
isDirWrite DIR
    True if directory DIR exists and is writable.
REVISED
      20141226  docsalvager
'

isExecuted_help="
NAME
    isExecuted - Return true(0) if script is being executed rather than sourced

SYNOPSIS
    isExecuted

DESCRIPTION
    True(0) if script is being executed. Should be last command in script.
    Returns:
        True(0) if script is being executed.
        False(1) if script is being sourced.

EXAMPLE
    isExecuted  && { \"\${CMD[@]}\"; ___exit \"\$CMD[@]\"; }

REVISED
    $_revised by docsalvager
"

isFileAny_help="
NAME
    isFileAny - Do files exist matching given prefix

SYNOPSIS
    isFileAny [PREFIX]

OPTIONS
    [PREFIX]
        A partial or complete path name. Defaults to files in current directory.

REVISED
    20180304 by docsalvager
"

isFileExec_help='
isFileExec && ...
    True if file is an executable file (has execute permission for the user).
    Replaces:
        isExecutable
    Equivalent:
      [[ -x FILE ]]  && ...
REVISED
      20160410  docsalvager
'

isFileExists_help='
isFileExists FILE
    True(0)  if FILE exists.
    True(0)  if FILE is a symbolic link to an accessible file/directory.
    False(1) if FILE does not exist.
    False(1) if FILE is broken symbolic link (target file/directory is inaccessible).
    Equivalent:
      [[ -e FILE ]]  && ...
REVISED
      20160718 by docsalvager
'

isFileLink_help="
isFileLink FILE  && ...
    True(0)  if FILE is a symlink, whether or not the symlink's target is accessible.
    False(1) otherwise.
    Equivalent:
      [[ -L FILE ]]  && ...
REVISED
      20160410  docsalvager
"

isFileNonNull_help='
isFileNonNull FILE
    True if FILE exists and has a non-zero length.
    Equivalent:
      [[ -s FILE ]]  && ...
REVISED
      20161207 by docsalvager
'

isFileRead_help='
isFileRead FILE
    True if FILE exists and is readable.
    Equivalent:
      [[ -r FILE ]]  && ...
REVISED
      20160410  docsalvager
'

isFileRegular_help='
isFileRegular FILE
    True if FILE exists and is a regular file.
    Equivalent:
      [[ -f FILE ]]  && ...
REVISED
      20160410  docsalvager
'

isFileRemote_help="
isFileRemote FILE
    True(0) if FILE is on a mounted remote filesystem or does NOT exist.
    False(1) if FILE is on a local file system.
REVISED
      20160729 by docsalvager
"

isFileWrite_help='
isFileWrite FILE
    True if FILE exists and is writable.
    Equivalent:
      [[ -w FILE ]]  && ...
REVISED
      20160410  docsalvager
'

isFnLoaded_help="
NAME
    isFnLoaded - True if function is loaded in memory (has been defined)

SYNOPSIS
    isFnLoaded functionname  && ...

DESCRIPTION
    Returns 0 if function is loaded, 1 if not.

EXAMPLE
    isFnLoaded fileListByTimestamp  && ...

REVISED
    20181212 by docsalvager
"

isIn_help='
isIn SUBSTRING STRING
    Returns true(0) if SUBSTRING is in STRING. Otherwise false(1).
    Resources
        Original based on ...
        http://stackoverflow.com/questions/2829613/how-do-you-tell-if-a-string-contains-another-string-in-unix-shell-scripting
REVISED
        20160210  docsalvager
'

isLinesExceeds_help='
... | isLinesExceeds MAX  && ...
    Returns true(0) if number of lines in stdin (via pipe) exceeds MAX.
    Otherwise false(1). Onlt reads up to MAX lines of stdin.
    Resources
        Original based on ...
        http://stackoverflow.com/questions/2829613/how-do-you-tell-if-a-string-contains-another-string-in-unix-shell-scripting
REVISED
        20161207 by docsalvager
'

isLinkBroken_help="
isLinkBroken LINK  && ...
    Return true(0) if LINK is a broken link (cannot find its target).
    Requires:
        Uses 'find ... -xtype l ...' to find broken links
REVISED
        20160201 docsalvager
"

isListed_help='
isListed WORD LIST  && ...
    Return true(0) if WORD is in LIST.
REVISED
        20140915 docsalvage
'

isLogin_help='
isLogin
    Return true(0) if running in a login shell.
REVISED
        20160309  docsalvager
'


isNotEmpty_help='
isNotEmpty "$1"  && ...
'

isNotNull_help='
isNotNull "$1"  && ...
REVISED
        20150228  docsalvager
'

isNull_help='
isNull "$1"  && ...
REVISED
        20150228  docsalvager
'

isOption_help="
NAME
    isOption - True(0) if option is present in the argument list

SYNOPSIS
    isOption OPTION \"\$@\"

DESCRIPTION
    Returns true(0) if OPTION is in argument list (\"\$@\").
    Returns false(1) if OPTION is not in argument list (\"\$@\").
    Nothing is printed in either case.

EXAMPLE
    isOption --GUI \"\$@\"   && ...

REVISED
    $_revised by docsalvager
"

isRecursive_help='
    isRecursive
        Return true if this function is found anywhere above here in the call stack.
        Such a case is likely an error causing an infinite loop involving multiple
        functions calling each other.
    CallStack:
        top of stack  6
        FUNCNAME[5]   5   main
        FUNCNAME[4]   4     <function4>-----\  if any of these 3 equal the value
        FUNCNAME[3]   3       <function3>----| of <function1>, then that function
        FUNCNAME[2]   2         <function2>-/  is recursive.
        FUNCNAME[1]   1           <function1>
        FUNCNAME[0]   0             isRecursive
REVISED
        20141118  docsalvager
'

isOverflow_help='
isOverflow "text"  && ...
    Return true if text is too big for a non-scrollable GUI dialog box.
REVISED
        20140915  docsalvager
'

isPipeExists_help='
isPipeExists PIPE
    True if pipe PIPE exists.
REVISED
      20150302  docsalvager
'

isPortOpen_help='
isPortOpen --addr=000.000.000.000 --port=00  && ...
    Return true if --port on host at numeric IP address 000.000.000.000 is open.
    Source:
        nixCraft at
            http://www.cyberciti.biz/tips/spice-up-your-unix-linux-shell-scripts.html
REVISED
        20160425  docsalvager
'

isSameFile_help='
isSameFile file1 file2
    Replaces:
        areSameFile
REVISED
        20140915  docsalvager
'

isSourced_help='
isSourced
    Returns true (0) if calling script is being sourced rather than executed.
REVISED
        20141031  docsalvager
'

isStdin_help='
isStdin
    Returns true (0) if data is present on standard-input.
REVISED
        20150319  docsalvager
'

isTTY_help="
isTTY
    Returns true(0) if session is using a tty.
REVISED
        20170208 by docsalvager
"

isWritable_help='
isWritable "$1"  && ...
'

isZeroLen_help="
isZeroLen \"$1\"  && ...
"

json_help="
cat FILE.json | json [options] <jq filter> [file...]
    Wrapper for jq utility for converting and printing JSON.
    Piped Input:
        Piped input is piped to the external jq command.
    Executable:
        $(which jq)
REVISED
        20160816 by docsalvager

    Help (jq):
$(printAt 6 "$(jq --help)")

    Online Manual (jq):
      https://stedolan.github.io/jq/manual/
"


kernelModules_help="
kernelModules [--noheading]
    Show list of Linux kernel modules.
    Returns true(0) if no errors. Otherwise false(1).
    Options:
        --noheading
            Do not print heading line.
REVISED
        20160817 by docsalvager
"


kit_help="
NAME
    kit - A multi-call script that adds a graphical interface to bash.

SYNOPSIS
    kit [[--alt] FUNCTION] [--OPTION[=| ]OPTION-ARG ...]

DESCRIPTION
    Kit is a toolkit/framework/library of functions designed to provide a graphical
    (GTK+) interface to bash scripts and streamline script development by packaging
    common solutions into bash functions. Help is available for each function,
    both on the command line and via graphical popup dialog windows using
    an available tool such as YAD, Zenity, dialog, or commandline text.
    ---
    Kit was inspired by and borrows much from BusyBox. A link to kit with the
    same name as any of the functions will automatically invoke that function.
    Functions return true(0) if successful (including if just help shown),
    otherwise, false(1). Some functions return other non-zero values
    (2, 3, ...) for various errors. Only --long-options are supported.
    ---
    The kit() function is the \"anchor\" that determines the initial function to
    execute based on how this script was called and the arguments passed.

INVOCATION
    Kit can be used in three different ways...
        As a base layer of code included in other scripts
            Source the kit script first thing. Best to source a given version
            (e.g. 'source kit-043') rather than the just the current stable
            version (kit), to insure compatibility. Then just create any unique
            functions required. One of those, must have the same name as the script,
            less any optional version suffix. Thus, the script 'myscript-001' must
            have a function named 'myscript'. 'Sourcing' a script reads it in as if
            it was part of the current script so all variables and functions defined
            in 'kit' are available to the current script. Thus reassigning values to
            those varibles or creating functions of the same name will replace the
            'kit' versions. Avoid doing that unless you've read the 'kit' source
            and are sure the affects are desired.
            Example (near beginning of script):
                . kit-044
                source kit-044
                . kit
                source kit
        functionName argument...
            Creating functionName symlinks to 'kit' as is done with 'busybox'
            allows the function with the exact same name to be invoked as a command.
            Example:
                ln -s  /path/to/kit  exactNameOfFunction
            If you do not like the mixed-case function names, you can create
            a small script that sources kit and in it define short alias
            functions such as...
                function gtkwarning () { aliasOf gtkWarning \"\$@\"; }
        Called directly:
            Example:
                kit --alt functionName arguments...

LIMITATIONS
    File and directory names
        Kit does NOT handle files or directories with embedded spaces or other
        non-printable characters! Special handling is required of any program
        to support this so it is not universal. Life is just a lot easier
        without allowing this MS-Windows-inspired feature. Before using with
        kit, convert filnames/directory names with spaces to mixedcase or
        replace spaces with hyphens(-), underscores(_) or dots(.)...
            Filename with spaces
            FilenameWithSpaces
            Filename-with-spaces
            Filename_with_spaces
            Filename.with.spaces

PIPED INPUT
    A few functions support piped input. Most do not so instead, use Bash Process
    Substitution in place of piping so that the output of the command that must
    be the input to the kit function is instead treated as a file.
        Thus, instead of...
            command ... | kit --alt functionName ...
        Use
            kit --alt functionName ... < <(command ...)

ARGUMENTS
    FUNCTION
        A function defined in this kit script.
    --OPTION
        An option with no arguments. The '--' prefix is required.
            functionName --option
    --OPTION=OPTION-ARG
        An option with one(1) argument. '--' prefix is required.
            functionName --option=optionarg
    --OPTION OPTION-ARG...
        An option with one or more arguments. Any number of size of arguments are
        allowed up to the next '--' which indicates the end of arguments or the
        start of the next option. Note that an argument like '-argument' will NOT
        be treated as an option. It's just another option argument.

OPTIONS
    --alt FUNCTIONNAME [ARGUMENT...]
        Call a different function the one we were called from.
        This allows any kit-based script direct commandline access to every
        kit function as well as every additional function in the script.
    --
        Conventionally, bash takes '--' as the end-of-options marker and treats
        all subsequent arguments as positional arguments, even if they have hyphen
        prefixes. Kit slightly modifies that behavior by treating '--' like any
        other --option. Thus, subsequent arguments UP TO THE NEXT --option, if
        any, are treated as 'option arguments'.

NAMING CONVENTIONS
    Command and Function Names
        Function names are mixed-case starting with lowercase.
        Calling the script via a symlink exactly matching a function name,
        invokes that function. By default, executing the script (e.g kit-040)
        by its actual name strips off the hyphen-version suffix and calls
        the kit() function. By convention, a symlink of just 'kit' points
        to the current stable script (i.e. ./kit -> ./kit-040)
    Versioning
        The version number is a 3 or 4 digit number. Each digit
        is a separate level so the usual dots are not required and usually
        excluded. Thus, each level can have at most 10 versions.
        (ex:  kit version 0.4.0 is named 'kit-040')

TRAP FUNCTIONS
    Traps (software interrupts) can be enabled by uncommenting lines near
    the begining of the 'kit' script. Each line enables one kind trap and invokes
    the listed function (callback) upon catching the interrupt.

FROM SCRIPT TO FUNCTION TO COMMAND FAQs
    How to install kit?
        Copy the kit-000 and kit-000.meta scripts to a directory in your PATH.
        Create the kit and kit.meta symlinks to those files...
            kit -> kit-043
            kit.meta -> kit-043.meta
    What is the COMMAND?
        The COMMAND is the function whose output will be returned on exit of
        the script.
    How are functions used?
        Every function in kit can be a COMMAND. This helps tremendously in
        development and debugging since each function can be invoked individually
        from the commandline to observe its behavior.
    How to create a command from a function?
        A symlink to the 'kit' script named the same as a kit function name,
        invokes that function as a command. This mimics the familiar BusyBox
        behavior that inspired kit.
    How can a kit function be called from the commandline?
        The '--alt FUNCTION' option invokes FUNCTION as the command instead of 'kit'.
            kit --alt FUNCTION argument...
    How to source kit from within other scripts?
        The entire kit script can be sourced. It's most reliable to source the
        specific version the script was written to depend on rather than the
        current version which 'kit' should be a symlink to. Watch out for variable
        and function name conflicts. Scripts that source 'kit' may of course
        contain numerous additional functions.
    What is required in scripts that source kit?
        It is recommended, but not required(?), that scripts are layed out to these
        \"Kit Conventions...\"
            Source kit-000 first thing (i.e. 'source kit-043').
            Declare (but not necessarily define) global variables.
            Define functions unique to the script.
            End the script with the following line...
                isExecuted  && { \$COMMAND \"\${COMMANDARGS[@]}\"; ___exit; }
    What are some important global variables:
        SCRIPT      executing script name with version suffix
        NAME        executing script name w/o version suffix
        COMMAND     function to execute as a command
    How to get a list of all variables and their values, including environment variables?
        kit --alt varAll

DIALOG TOOLS KNOWN TO WORK
    yad 0.12.4
    yad 0.28.1
    yad 0.40.0
    zenity 2.30.0
    dialog 1.1-20080819

SCRIPT
    $kit_SCRIPT

VERSION
    $kit_VERSION

RESOURCES
    For help with code idioms, see...
        http://mywiki.wooledge.org/BashGuide/TestsAndConditionals#Grouping_Statements
    For multi-conditionals, see...
        Zim -- Code?bash:Techniques:ConditionalExecutionLists

REVISED
    $_revised by docsalvager
        (includes global code revisions)
"

kit_common_help="
COMMON OPTIONS (valid for most all commands):
    --alt FUNCTION
        If these are the first 2 arguments, then execute FUNCTION instead of
        the original command function. Subsequent arguments will be arguments of
        FUNCTION. This allows any kit-based script direct commandline access to
        every kit function as well as every additional function in scripts that
        source kit. The '--alt' is optional.
    --CLI
        Force output to Command Line Interface (i.e. plain text).
    --GUI
        Force output to Graphical User Interface like YAD or Zenity
    --help
        Show help.
    --help-all
        Interactive GUI to select help for any function.
    --help-text=\"...\"
        Inline multiline help text inside double quotes is processed by
        'eval' as in notes and help read from \$METAFILE, currrently ...
            $METAFILE
        This allows inclusion of commandline help and programmatic
        formatting. Embedded quotes must be escaped as required by bash.
        (enclosure in single-quotes DEPRECATED beginning with kit-040 version)
    --inspect [1|2|3]
        Show diagnostics at LEVEL number (default is 1).
            Level 1 - basic
            Level 2 - add function call trace
            Level 3 - add GTK interactive debugger
    --LOG
        Force output to the script's LOGFILE.
    --NODLG
        Do NOT use a dialoger command so output will be plain text.
    --note-all
        Interactive GUI to select a note from the METAFILE.
    --version
        Show version number.
        To capture in a script...
            VAR=\"\$(kit-based-script --version --CLI)\"
    --
        Subsequent argument(s) up to next --option or end of arguments are
        positional. Most commonly used for filenames.

COMMON NOTES
    METAFILE ($kit_META)
        The METAFILE is a bash script of almost nothing but variable assignments.
        Instead of being executed or sourced though, it is searched by kit functions
        and only the desired \"metadata\" (help text) retrieved. This reduces the
        memory footprint of kit by over 50% and greatly improves responsiveness.
        ---
        The assigned strings may contain embedded \"Command Substitution\" code
        like \$(command...). The script permissions are set to 'executable' and
        kit will refuse to read it otherwise.
        ---
        Each assigment is of the format...
            <functionname>_help=\"
                :
                Manpage-like help text...
                :
            \"
        Or...
            <preferredcolorname>_color=\"
                :
                A local name for a color code used by the ColorPref() function...
                :
            \"
        Or...
            <externalcommandname>=\"
                :
                Manpage-like help text including the command's --help output
                as well as additional notes, examples and hyperlinked references...
                :
            \"
"

lineCount_help='
lineCount text ...
    Number of lines in text.
        LEN=$(lineCount text)
REVISED
        20161207 by docsalvager
'

lineDelete_help='
lineDelete linenum filename
    Delete a line of text from a file starting at the line number given.
      NEWTEXT=$(lineDelete lineNum "filename")
'

lineInsert_help='
lineInsert linenum "text" filename
    Insert a line of "text" into a file starting at the line number given.
      NEWTEXT=$(lineInsert lineNum "text" filename)
'

lineNumOf_help="
SYNTAX
    lineNumOf text

DESCRIPTION
    Echos line number of first line containing the text
      LINE=\$(lineNumOf \"findtext\")

REVISED
    $_revised by docsalvager
"

lineNumbers_help="
NAME
    lineNumbers - Print line numbers preceeding each line OF STDIN

SYNOPSIS
    ... | lineNumbers

DESCRIPTION
    For each line piped (thus on STDIN), prints an up to 4 digit right justified
    line number, 2 spaces, and then the line. Uses 'awk' instead of 'nl' since
    Puppy 5.2.2 Wary does not include 'nl'.

REVISED
    20180409 by docsalvager
"

lineReplace_help='
lineReplace "find-text" "entire-replacement-line" "filename"
    Insert a line of "text" into a file starting at the line number given.
      NEWTEXT=$(lineReplace "findtext" "entire-replacement-line" "filename")
'


linkMAXSYMLINKS_help="
linkMAXSYMLINKS
    Print how many links can point to other links on this system. This is the
    value of the kernel constant MAXSYMLINKS which is usually not made available
    in /proc or /sys. MAXSYMLINKS is a terminator to try to prevent endless
    loops caused by symlink circular references. Kernel 4.2+ no longer use
    recursion in symlink creation thus eliminating the need for MAXSYMLINKS.

    This function determines MAXSYMLINKS experimentally by creating a
    chain of symbolic links in the /tmp directory and detecting the first broken
    one.
    Requires:
        isLinkBroken() which uses 'find ... -xtype l ...' to find broken links
REVISED
        20160201  docsalvager
"


linkTarget_help="
NAME
    linkTarget - Print the file or directory at the end of a chain of symlinks

DESCRIPTION
    Print the file or directory at the end of a chain of 1 or more links.
    (e.g. the \"target\")

SYNOPSIS
    linkTarget LINK

ARGUMENTS
    LINK
      Print the file or directory at the end of a chain of 1 or more LINKs
      ReturnCodes:
        0
          LINK is a valid link to an existing file or another link.
          Prints the target of the link.
        1
          LINK is null (\"\") or no arguments given or link does not exist.
          Prints nothing.
        2
          LINK is not a link. It is a file or directory.
          Prints nothing.
        3
          LINK is a broken link. The target does not exist.
          Prints the target of the link.

REVISED
    20181031 by docsalvager
"

linkTrace_help="
NAME
    linkTrace - Trace all components of a symbolic link.

DESCRIPTION
    Uses the 'namei' command to produce an 'ls-like' listing of all components
    of a symbolic link.

SYNOPSIS
    linkTrace LINK

ARGUMENTS
    LINK
        Nominally, the name (absolute or relative) of a symbolic link.
        But could actually be any file or directory name.

NOTES
    - Directories that are mountpoints have 'D' instead of 'd' for the object
      type (first position) of the permissions. (i.e. Drwxr-xr-x)
    - Does NOT WORK with /proc or /sys because it cannot 'stat' the files.

EXAMPLE
    [root@LX03:/etc] kit linkTrace /root/.bashrc
    f: /root/.bashrc
    Drwxrwxrwt root root /
    drwx------ root root root
    lrwxrwxrwx root root .bashrc -> ../home/DocSalvager/root/LX03/.bashrc
    Drwxrwxrwt root root   ..
    lrwxrwxrwx root root   home -> /boot/home
    Drwxrwxrwt root root     /
    lrwxrwxrwx root root     boot -> /initrd/mnt/dev_save
    Drwxrwxrwt root root       /
    drwxr-xr-x root root       initrd
    drwxr-xr-x root root       mnt
    Drwxr-xr-x root root       dev_save
    drwx--x--x root root     home
    drwx------ root root   DocSalvager
    drwx------ root root   root
    drwx------ root root   LX03
    -rw------- root root   .bashrc

SEE ALSO
    namei
        meta namei

RESOURCES
    http://linux.die.net/man/1/namei

REVISED
    20171108 by docsalvager
"

listClip_help="
listClip - Remove a part (substring) of a list(string)

listClip substring string
    Remove a part (substring) of a list(string).
      NOINSPECT=$(listClip --inspect \"\$@\")
REVISED
        20170310 by docsalvager
"

listIndex_help="
listIndex - Print position of a word in a list

listIndex WORD LIST
    Print position of WORD in LIST or zero(0) if not found.
        VAR=$(listIndex WORD LIST)
REVISED
        20161221 by docsalvager
"

log_help="
NAME
    log - Write log messages to log file

SYNOPSIS
    log [OPTION]

DESCRIPTION
    Write log messages to file in global variable \$LOGFILE.
    If LOGFILE does not exist on first use, it will be created.

OPTIONS
    --allerrors
        Log all subsequent stdout and stderr in script to LOGFILE.
    --arguments \$FUNCNAME \"\$@\"
        Log arguments (parameters) passed from calling command/script/function.
    --start
        Write startup message.
    --status [TEXT-STRING]
        Write a string to the script log file.
        Example:
          kit --alt logStatus \"This is a test\"
            log entry...
              2013-06-06 07:11:25 kit.logStatus() This is a test
    --stop
        Write stop message.
    --system [OPTIONS] [MESSAGE]
        Writes MESSAGE to /var/log/messages using external command:  logger.
        Options:
$(printAt 8 "$(command logger --help 2>&1)")

        Facility Names:
            auth, authpriv (for security information of a sensitive nature), cron,
            daemon, ftp, kern, lpr, mail, news, security (deprecated synonym for auth),
            syslog, user, uucp, and local0 to local7, inclusive.

        Level Names:
            alert, crit, debug, emerg, err, error (deprecated synonym for err),
            info, notice, panic (deprecated synonym for emerg), warning,
            warn (deprecated synonym for warning).
            For the priority order and intended purposes of these levels, see syslog(3).

REVISED
    $_revised by docsalvager
"

man_help="
NAME
    man - Search for or show manpage(s)

SYNOPSIS
    man [OPTION...] SUBJECT

DESCRIPTION
    Search manpages for SUBJECT.

OPTIONS
    -k SUBJECT
    --search SUBJECT
    --apropos SUBJECT
        Lists manpages containing keyword SUBJECT (case-insensitive) in their NAME block.
    --failmsg
        Optional message to include in the dialog prompting for a new search
        term if initial search fails to find anything.

DEPENDS
    gnome-terminal

REVISED
    $_revised by docsalvager
"

manifest_help="
manifest <SCRIPT>

    -<{ Not Yet Implemented }>-

    Produces a JSON manifest file named <SCRIPT>.manifest noting all variables
    and files referenced by <SCRIPT>.
    Example:
        Produce kit-039.manifest and kit-039-verify...
            manifest kit-039

REVISED
    20181210 by docsalvager
"

manifestVerify_help="
manifestVerify <SCRIPT>

    -<{ Not Yet Implemented }>-

    Uses <SCRIPT>.manifest to report any missing variables or files.
    Should be called near the begining of <SCRIPT>.
    Example:
        Line near beginning of kit-039 to call verify script...
            VERIFY=\"\$(manifestVerify kit-039.manifest)\"  || { dialogShow \"\$VERIFY\"; exit; }

REVISED
    20181210 by docsalvager
"

masterLocal_help="
masterLocal LOCALPATH
    Print absolute logical paths of every directory or subdirectory of
    LOCALPATH on the local host where LOCALPATH/.properties contains
    the name of local host (thus signifying that it is the master directory for
    all distributed copies of it). Returns true(0) if any found. Otherwise,
    returns false(1).
REVISED
        20161222 by docsalvager
"

memoryShow_help='
memoryShow
    Show memory buffers values and limits.
REVISED
        20160817 by docsalvager
'

memory_help='
memoryShow
    Echoes memory buffers values and limits.
REVISED
        20160707 by docsalvager
'

meta_help="
NAME
    meta - Show help meta data about a command, function or other subject

SYNOPSIS
    meta [--subject SUBJECT] [OPTION...]

DESCRIPTION
    Selectively searches scripts, script.meta files, command --help, bash help,
    manpages and other accessible sources for information about SUBJECT.
    Specifically...
        Prints the value of the variable in \$METAFILE file matching SUBJECT.
        If not found, tries SUBJECT_help. If no match, attempts commandline help.
        If found, prints value and returns true(0). If not found, prints error
        message and returns false(1).
    The [Information] button opens other relevent documentation such as an
    'apropos' search of manpages.

ARGUMENTS
    SUBJECT
        Usually a command but could be any subject.
    OPTION
        One or more --options, each with optional arguments (see below).

OPTIONS
    [--subject] SUBJECT
        Subject to show meta data for. Usually a kit function or external command
        help. If first argument is not an --option, it is assumed to be the SUBJECT
        and thus '--subject' optional.
    --source SOURCE
        Host name or domain name to connect to such as LX02 or die.net.
    --protocal PROTOCAL
        Protocal used to connect to SOURCE.
        One of...
            ssh
            http
    --search SEARCH
        Search \$METAFILE for SEARCH string and present in a dialog list.
        Select the topic from that list for more help.
    --title TITLE
        Set window title.

REQUIRES
    dialog
    dialogEntry
    dialogSelect
    metaSource
    optionArg

SEE ALSO
    note

REVISED
    $_revised by docsalvager
"

metaFiles_help="
NAME
    metaFiles - Open fileSelect on a directory

SYNOPSIS
    metaFiles DIR

DESCRIPTION
    If given a directory DIR containing a .meta hidden directory, opens
    fileSelect on that directory. Otherwise, returns false(1).

REVISED
    20180405 by docsalvager
"

metaFind_help="
NAME
    metaFind - Finds meta data

SYNOPSIS
    metaFind DIR
    metaFind HTMLFILE
    metaFind NAME

DESCRIPTION
    If given an HTMLFILE (*.html)...
        Opens file with defaultbrowser, no output passed back, returns true(0).
    If given a DIR containing a .meta directory...
        Opens fileselector on the .meta directory. Prints any filename selected
        and returns true(0). If none selected, returns false(1).
    Otherwise...
        Prints the value of the variable in $kit_META file matching NAME. If NAME
        not found, tries NAME_help. If no match, will attempt commandline help.
        If found, prints value and returns true(0). If not found, prints error
        message and returns false(1). Currently, NAME is usually a kit FUNCTION,
        but may also be a MACRO or a prefered color (see colorPref).

WARNING
    Uses eval to support process substitution ($()) in meta data. This
    provides for inclusion of help from related and/or dependent commands.

EXAMPLE
    _msg=\"\$(metaFind \"\$@\")\"

DEPENDS
    helpHtml
    helpCmd
    noteFind
    optionArg

REVISED
    $_revised by docsalvager
"

metaSource_help="
NAME
    metaSource - Search for CMD meta documentation

SYNOPSIS
    metaSource CMD [OPTION...]

DESCRIPTION
    If CMD is a kit function or external command, print text received from metaFind()
    If --source and --protocal options are supplied, print results sent back
    from remote connection via PROTOCAL to SOURCE (defaults to 'ssh') and execution of
        CMD --help

OPTIONS
    --source=SOURCE
        Host name or domain name to connect to such as LX02 or die.net.
    --protocal=PROTOCAL
        Protocal used to connect to SOURCE.
        One of...
            ssh
            http

EXAMPLES
    To search host LX02 via SSH for command:  locate
        metaSource  locate  --source=LX02  --protocal=ssh
    To search website domain die.net via http for command:  locate
        metaSource  locate  --source=\"die.net\"  --protocal=http

REVISED
    $_revised by docsalvager
"

names_help="
NAME
    names - List names of functions, commands, variables, etc.

SYNOPSIS
    names --type TYPE [--pfx PREFIX]

DESCRIPTION
    List object names known to the bash Programmable Completion command, 'compgen'.

ARGUMENTS
    --type TYPE
        Required TYPE name for the bash 'compgen -A ...' command:
            alias       Alias names.
            arrayvar    Array variable names.
            binding     Readline key binding names.
            builtin     Names of shell builtin commands.
            command     Command names.
            directory   Directory names.
            disabled    Names of disabled shell builtins.
            enabled     Names of enabled  shell builtins.
            export      Names of exported shell variables.
            file        File names.
            function    Names of shell functions.
            group       Group names.
            helptopic   Help topics as accepted by the help builtin.
            hostname    Hostnames from the file in the HOSTFILE shell variable.
            job         Job names, if job control is active.
            keyword     Shell reserved words.
            running     Names of running jobs, if job control is active.
            service     (Network) Service names listed in /etc/services.
            setopt      Valid arguments for the -o  option to the 'set' builtin.
            shopt       Shell option names as accepted by the shopt builtin.
            signal      Signal names.
            stopped     Names of stopped jobs, if job control is active.
            user        User names.
            variable    Names of all shell variables.
    --pfx PREFIX
        Optional PREFIX.

ALIASES
    commands [--pfx PREFIX]
        objects --type command [--pfx PREFIX]
    functions [--pfx PREFIX]
        objects --type function [--pfx PREFIX]

REVISED
    20170802 by docsalvager
"

netstat_help="
NAME
    netstat - Network statistics for all connections

SYNOPSIS
    netstat

DESCRIPTION
    Network statistics for all connections.

OPTIONS
$(printAt 4 "$(command netstat --help 2>&1)")

NOTES
    - UDP ports LISTENING should have a tttwin   <<<<<< LEFTOFF 20180308

RESOURCES
    How to read NETSTAT -AN results
        https://sites.google.com/site/xiangyangsite/home/technical-tips/linux-unix/networks-related-commands-on-linux/how-to-read-netstat--an-results

REVISED
    20180308 by docsalvager
"

nl="
NAME
    nl - Number Lines command

SYNOPSIS
    nl [OPTION]... [FILE]...

DESCRIPTION
    Takes lines from STDIN and writes them to STDOUT prefixed with line numbers.

OPTIONS
$(printAt 4 "$(command nl --help 2>&1)")

NOTES
    All input lines are 'body' lines unless they are separated into sections
    by a line containing nothing but one of the following escaped code strings
    (uncomfirmed)...
        \:\:\:
            (start of header)
        \:\:
            (start of body)
        \:
            (start of footer)

RESOURCES
    http://www.sanfoundry.com/nl-command-usage-examples-in-linux/

REVISED
    20171119 by docsalvager
"

note_help="
NAME
    note - Print a note

SYNOPSIS
    note NAME [OPTION...]

DESCRIPTION
    Prints the value of the variable set in a \"METAFILE\"...
        (currently:  $METAFILE)

OPTIONS
    --before=\"...\"
    --help-text=\"...\"
    --after=\"...\"
        Concatenates these 3 in this order.
    --metafile=\"FILENAME\"

EXAMPLE
    _text+=\"\$(note \"\$_var\" \"\$@\")\"

DEPENDS
    noteFind
    optionArg

REVISED
    $_revised by docsalvager
"

noteAll_help="
NAME
    noteAll - Show picklist of all notes in a metafile

SYNOPSIS
    noteAll [--pfx=PREFIX] [--metafile=FILE]

DESCRIPTION
    Show picklist of all notes. Double-click on topic for note.

OPTIONS
    --pfx=PREFIX
        List only note topics starting with PREFIX.
    --metafile=FILE
        Requires FILE to search for notes.

DEPENDS
    noteList
    meta
    yad

REVISED
    20180119 by docsalvager
"

noteFind_help="
NAME
    noteFind - Find and print a notation in a \"metafile\".

SYNOPSIS
    noteFind NAME [--metafile METAFILE]

DESCRIPTION
    Prints value of the variable NAME in METAFILE. If NAME is not
    found, tries NAME_help. If found, prints value and returns true(0).
    If not found, prints error message and returns false(1).

EXAMPLE
    HELPCOMMON=\"\$(noteFind kit_common_help --metafile \"\$kit_DIR/\$kit_META\")\"

DEPENDS
    optionArg
    varFind

WARNING
    Uses eval to support process substitution \$() in meta data. This
    provides for inclusion of help from related and/or dependent commands.

TODO
    Merge most code of NoteFind(), colorPref(), colorPrefNote() together?

REVISED
    $_revised by docsalvager
"

noteList_help="
NAME
    noteList - List all notes in FILE

SYNOPSIS
    noteList [--pfx PREFIX] [--metafile FILE]

DESCRIPTION
    List all notes in FILE.

OPTIONS
    --pfx=PREFIX
        List only note topics starting with PREFIX.
    --metafile=FILE
        Requires FILE to search for notes.

EXAMPLES
    List all notes...
        noteList --metafile=\"...\"
    List only notes starting with \"arg\" and use default \$METAFILE...
        noteList --pfx=arg

REVISED
    20180815 by docsalvager
"

noteShow_help="
NAME
    noteShow - Print text to current user interface

SYNOPSIS
    noteShow NAME [OPTION...]

DESCRIPTION
    Prints to the current user interface the value of the variable in the meta
    file ($METAFILE) matching NAME. If NAME is not found, tries NAME_help.

OPTIONS
    --title=\"...\"
        Set window title. Defaults to \$TITLE.
    --metafile=\"...\"
        File to search for notes. Defaults to \$METAFILE.

EXAMPLE
    [[ \"\$1\" == --help ]]  && { noteShow \"\${_fn}_help\" \"\$@\" --title=\"Help\"; return 1; }

DEPENDS
    dialog
    note
    optionArg

REVISED
    20180125 by docsalvager
"

option_help="
NAME
    option - If option was given, print it.

SYNOPSIS
    option  FIND  \"\$@\"

DESCRIPTION
    Returns true(0) if \"\$@\" contains FIND and prints FIND. Otherwise, returns
    false(1) and prints nothing. Used to set a variable to the --option FIND
    if true(0), or null("") if false(1). If \"\$@\" contains FIND=argument,
    only the FIND portion is printed. The rest is ignored.

ARGUMENTS
    FIND
        -- | '' | ""
            True(0) if FIND exactly equals (--), (''), or ("").
        anything
            True(0) only if first argument in \"\$@\" matches FIND exactly. This
            allows the first argument to not require the '--' prefix (for backward
            compatibility). Subsequent options in \"\$@\" require the '--' prefix.
        --anything
            True(0) if first argument in \"\$@\" matches FIND exactly.

NOTES
    - If true(0), prints FIND so it c an be placed in an internal variable.
    - Returns true(0) if FIND is in the argument list,
    - Returns false(1) if FIND is NOT in the argument list or list is empty.
    - Returns false(1) if there are no arguments(\"\$@\").

EXAMPLES
    _force=\"\$(option --force \"\$@\")\"
      :
    [[ \"\$_force\" ]]  && { do_forced_actions ... ; }

REQUIRES
    optionArg()

REVISED
    $_revised by docsalvager
"


optionArg_help="
NAME
    optionArg - If option was given, list all option arguments.

SYNOPSIS
    optionArg  FIND[:NUM]  \"\$@\"

DESCRIPTION
    Returns true(0) if arguments(\"\$@\") contains FIND and prints all arguments
    up to next --option (which is any argument beginning with '--').

ARGUMENTS
    FIND[:NUM]
        -- | '' | \"\"
            True(0) if FIND exactly equals (--), (''), or (\"\").
        anything
            True(0) only if first argument in \"\$@\" matches FIND exactly. This
            allows the first argument to not require the '--' prefix (for backward
            compatibility). Subsequent options in \"\$@\" require the '--' prefix.
        --anything
            True(0) if first argument in \"\$@\" matches FIND exactly.
        :NUM
            If optional :NUM is given, only prints that argument.
            Numbering starts at 1.

NOTES
    - If true(0), prints any/all subsequent argument(s) up to next --option.
    - Returns true(0) if option is in the argument list,
    - Returns false(1) if option is NOT in the argument list or list is empty.
    - Returns false(1) if no arguments(\"\$@\").
    - An option can have zero or more arguments.
    - For --option=argument syntax in the argument list, only the first argument
      (the one following '=' is returned. Subsequent arguments up to the next
      --option are ignored.

EXAMPLES
    FILE=\"\$(optionArg file \"\$@\")\"
    FILE=\"\$(optionArg --file \"\$@\")\"
    POSITIONAL_ARGS=\"\$(optionArg '--' \"\$@\")\"

REVISED
    $_revised by docsalvager
"

optionName_help="
NAME
    optionName - Print option name less any leading hyphens (-/--)

SYNOPSIS
    optionName \"\$1\"

EXAMPLE
    local FN=\"\$(optionName \$1)\"

REVISED
    $_revised by docsalvager
"

pathRelativePy_help='
pathRelativePy FILE LINK
  Success:
      Print the relative path to FILE from LINK and return true(0).
  Failure:
      Print error message and return false(1).
  Requires:
      python 2.6
  Revised:
      20161201 by docsalvager
'

pathStr_help="
NAME
    pathStr - Print a defined part of the complete absolute logical pathname

SYNOPSIS
    pathStr --OPTION FILENAME

DESCRIPTION
    Given FILENAME, pathStr echoes the segment chosen by --OPTION of the
    'absolute-logical' pathname. Only one segment can be retrieved at a time and
    only the FILENAME string is parsed. The filesystem is never accessed, except
    to get the current directory in order to build an absolute path from a relative
    path. Thus, this function may be used on a FILENAME that does not yet exist.
    ---
    Linux path characteristics:
        Paths are 'absolute' or 'relative', and 'logical' or 'physical'.
        If directory is '/root', then for 'kit' in the 'bin' subdirectory ...
            Absolute path is:  /root/bin/kit
            Relative path is:  bin/kit
        If '/root/bin' is a symlink to '/initrd/mnt/dev_save/home/DocSalvager/bin',
        then ...
            Logical  path is:  /root/bin/kit
            Physical path is:  /initrd/mnt/dev_save/homeDocSalvager/bin/kit

OPTIONS
    --path
        Absolute-logical path including filename with extension(s)
    --dir
        Absolute-logical path of directory containing FILENAME (can be a dir)
    --file
        Filename only, including extension(s)
    --base
        Filename only, up to last dot(.)
    --ext
      Filename after last dot(.)

NOTES
    If FILENAME ends with a dot (.), 'pathStr --ext' will be '' (null)
    with a returncode of 1 (FALSE).

EXAMPLES
    _var=\"\$(pathStr --path ~/bin/file.name.ext)\"   ### /root/bin/file.name.ext
    _var=\"\$(pathStr --dir  ~/bin/file.name.ext)\"   ### /root/bin
    _var=\"\$(pathStr --file ~/bin/file.name.ext)\"   ### file.name.ext
    _var=\"\$(pathStr --base ~/bin/file.name.ext)\"   ### file.name
    _var=\"\$(pathStr --ext  ~/bin/file.name.ext)\"   ### ext

REQUIRES
    pwd
    argsNumber()
    isAnOption()
    pathStrAbsolute()

REVISED
    20180214 by docsalvager
"

pathStrAbsolute_help="
pathStrAbsolute PATHSTR
    Print an absolute logical path (e.g. following links) built from PATHSTR
    and the current working directory (via command 'pwd -L') if required.
    ***
    *** This is purely a string parsing operation and so the path need not exist.
    *** The only filesystem access is for the current logical working directory.
    ***
    Path characteristics:
        File paths are 'absolute' or 'relative', and 'logical' or 'physical'.
        If current directory is '/root', then for 'kit' in the 'lib' subdirectory ...
            Absolute path:
                /root/lib/kit
            Relative path:
                lib/kit
        If '/root/lib' is a symlink to '/initrd/mnt/dev_save/share/Software/DocSalvager/lib'
            Logical  path:
                /root/lib/kit
            Physical path (aka: the 'canonical' path):
                /initrd/mnt/dev_save/share/Software/DocSalvager/lib/kit
REVISED
        20170318 by docsalvager
"

pathStrTest_help="
NAME
    pathStrTest - Test all options to pathStr for a path/filename (need not exist)

SYNOPSIS
    pathStrTest PATHNAME

DESCRIPTION
    Prints diagnostic showing each part of PATHNAME using pathStr.

OPTIONS
    PATHNAME
        Any hypothetical path or filename, absolute or relative, logical or
        physical since it need not actually exist.

REQUIRES
    pathStr()

REVISED
    20180214 by docsalvager
"

pathStrTestSuite_help="
NAME
    pathStrTestSuite - Suite of test patterns calling pathStrTest

SYNOPSIS
    pathStrTestSuite

DESCRIPTION
    Prints a series of diagnostics of pathStr for a set of possible path/file names.

OPTIONS
    <none>

REQUIRES
    pathStrTest()

REVISED
    20180214 by docsalvager
"

permSetuid_help='
permSetuid
    Show all files on host with the SETUID permission. SETUID causes executables
    with it to run with the permissions of the owner (usually root) instead of
    the user running it. THIS IS VERY DANGEROUS and SHOULD NOT BE DONE UNLESS
    THERE IS NO OTHER WAY TO ACHIEVE FUNCTIONALITY!
    WrapperOf:
        ls -ld $(find /  -ignore_readdir_race -perm /6000 -type f -print)
    Source:
        https://www.safaribooksonline.com/library/view/linux-server-hacks/0596004613/ch01s12.html
REVISED
        20160817 by docsalvager
'

pipeClose_help='
pipeClose PIPE
    Delete a named PIPE opened with pipeOpen().
        To completely remove a pipe
            pipeClose "$CACHE/$PROC.$PID/$PIPE"
REVISED
        20160620 by docsalvager
'

pipeOpen_help="
pipeOpen PIPE
    Opens first-in, first-out named pipe (FIFO)...
        Creates pipe if it does not already exist.
        Creates parent directories in PIPE, if any, that do not already exist.
        Prints absolute-physical path of PIPE.
    Depends:
        mkfifo
        mkdir
    Examples:
        To open an existing pipe...
            pipeOpen \"\$CACHE/\$PROC.\$PID/\$VAR\"
        To open a new pipe (no difference in call)...
            pipeOpen \"\$CACHE/\$PROC.\$PID/\$VAR\"
    ToDo:
        - Add support for ...
            --mode=MODE    Set file mode (as in chmod), not a=rwx - umask
            --context=CTX  Set the SELinux security context of each created directory to CTX
REVISED
        20160621  docsalvager

    SEE ALSO...
$(printAt 8 "$(command mkfifo --help)")

$(printAt 8 "$(command mkdir  --help)")
"

printAt_help="
NAME
    printAt - Print indented text

SYNOPSIS
    printAt COLUMN TEXT...

DESCRIPTION
    Print TEXT beginning at column COLUMN (prefixed with COLUMN leading spaces).

ARGUMENTS
    COLUMN
        The number of spaces of indent.
    TEXT
        One or more lines of text, all of which will be indented COLUMN columns.

REVISED
    20180412 by docsalvager
"

printControl_help="
NAME
    printControl - Print string with control characters converted to escaped octal

SYNOPSIS
    ... | printControl [OPTION...]

DESCRIPTION
    Print string with control characters converted to escaped octal.
    Escape unprintable characters, mainly for grep-ping /proc/mounts
    Derived from the 'Esc() # [-e]' function in /etc/default/aufs on PuppyLinux528

OPTIONS
    --before \"TEXT\"
        TEXT that will be prepended to the printed output piped in via STDIN.
        TEXT may be multiline.
    --escaped
        Escape the escape character (\). For example, '\012' becomes '\\012'.

REVISED
    $_revised by docsalvager
"

printDecoded_help="
NAME
    printDecoded - Print a string with Pango markup escapes removed

SYNOPSIS
    printDecoded ESCAPEDSTRING

DESCRIPTION
    Prints ESCAPEDSTRING with special characters converted for Pango markup for
    various GTK utilities like yad, zenity and gtkdialog back to its original form.
        Unescapes &, <, and <

SEE ALSO
    printEncoded

EXAMPLE
    TEXT=\"\$(printDecoded \"\$TEXT_esc\")\"

REVISED
    $_revised by docsalvager
"

printEncoded_help="
NAME
    printEncoded - Print a string suitable for Pango markup

SYNOPSIS
    printEncoded TEXTSTRING

DESCRIPTION
    Prints TEXTSTRING with special characters converted for Pango markup in
    various GTK utilities like yad, zenity and gtkdialog.
        Converts &, <, and <

SEE ALSO
    printDecoded

EXAMPLE
    TEXT=\"\$(printEncoded \"\$TEXT\")\"

REVISED
    $_revised by docsalvager
"

processStatus_help="
NAME
    processStatus - Print process status info

SYNOPSIS
    processStatus [OPTION...]

DESCRIPTION
    Print process status information.


OPTIONS
    [--pid PID | --command COMMAND]
        If neither --pid or --command supplied, uses pid of self (\$\$).
        [--pid PID]
            Process ID number.
        [--command COMMAND]
            A command.
    [--details]
        Include details from /proc/PID/status.

EXAMPLE
    uiShow \$(processStatus --pid=1234)

REVISED
    20171115 by docsalvager
"

pstree_help="
pstree
    Echos process status 'tree' hierarchy (aka: ps -ef -H).
REVISED
        20160911 by docsalvager
"

readArray_help="
NAME
    readArray - Read multiline input into an array (with or w/o readarray builtin)

DESCRIPTION
    --- Not Yet Working ---

SYNOPSIS
    readArray ARRAY TEXT...

REVISED
    $_revised by docsalvager
"

returnCode_help="
returnCode VALUE
    Sets return code ($?) to an arbitrary VALUE which must be in the range 0-255.
    Anything else sets return code to 0.
REVISED
        20160817 by docsalvager
"

screenSize="
NAME
    screenSize - Returns current display screen size in pixels (width x height)

SYNOPSIS
    screenSize

EXAMPLE
    _screen_size=\"\$(screenSize)\"
    _screen_width=\"\${_screen_size%%x*}\"
    _screen_height=\"\${_screen_size##*x}\"

REVISED
    $_revised by docsalvager
"


stderr_help='
stderr [FILE]
    Set standard error (stderr) for all subsequent commands to FILE and
    echo the absolute-relative path of FILE.
    If FILE not given, echo just echo current destination of stderr.
    Always returns true(0).
    Examples:
        To send stderr to a log file...
            _stderr="$(stderr $LOGFILE)"
        To reset stderr to default...
            _stderr="$(stderr /dev/stderr)"
        To ignore stderr...
            _stderr="$(stderr /dev/null)"
REVISED
        20141219  docsalvager
'

stdinInput_help="
NAME
    stdinInput - Accept input via STDIN, such as from a pipe

SYNOPSIS
    stdinInput

DESCRIPTION
    /dev/stdin is tested for input and if there is any, it is printed.
    Unlike inputCli(), this function DOES NOT WAIT for input and so can be used
    to give a function support for optional STDIN without impacting performance.

ARGUMENTS
    <none>

EXAMPLE
    _stdin=\"\$(stdinInput)\"

REVISED
    $_revised BY docsalvager
"

scriptType_help='
scriptType
    Prints the pseudo-function name on the top of the function call stack.
    Will be "main"   if scriptType() is called from a function in the main script.
    Will be "source" if scriptType() is called from a function in a sourced script.
    Example:
        isExecuted "$COMMAND $(scriptType)"  && { kit --alt $COMMAND "$@"; scriptExit "$COMMAND" "$@"; }
REVISED
        20180815 by docsalvager
'

selfTest_help='
selfTest
    Unit tests.
    Example:
        _testsuite="$(optionArg --suite tests_kit)"
          :
        $_testsuite                 # run unit tests
REVISED
        20141102  docsalvager
'

sysPing="
NAME
    sysPing - Ping hosts listed in /etc/hosts

    --- IN DEVELOPMENT ---

SYNOPSIS
    sysPing

EXAMPLE
    To show status of hosts in a new roxterm tab...
        roxterm --tab --profile=Hold --execute kit --alt sysPing

REVISED
    20180405 by docsalvager
"


termSize_help="
termSize DEVICE
    Prints width and height in characters of the
    terminal session attached to DEVICE (i.e. /dev/pts/0)
    in the '--geometry compatible' format WxH.
    Example:
        _termsize=\"\$(termSize /dev/pts/0)\"
        ### might print:  150x53
        #
         --geometry \"\$_termsize\"
REVISED
    20190106 by docsalvager
"

thermal_help="
thermal CMD
    Thermal status.
    Command(CMD):
        status
            Print whether fan is on or off, temperature(s), and fan speed(s)
            if available.
REVISED
        20161207 by docsalvager
"

timeDate_help="
timeDate
    Prints current date and time in format yyyy-mm-dd HH:MM:SS
REVISED
    20180125 by docsalvager
"

timeMs_help='
timeMs
    Prints number of milliseconds (3 decimal places) since epoch.
REVISED
        20160624 by docsalvager
'

tolower_help='
tolower STRING
    Converts any uppercase letters in STRING into lowercase and echoes.
REVISED
        20140915 docsalvage
'

topic_help="
NAME
    topic - Print text indented beneath a line containing TOPIC string

SYNOPSIS
    topic  TOPIC  SOURCE

DESCRIPTION
    Prints all text in SOURCE indented at least 1 character underneath line
    containing TOPIC.

ARGUMENTS
    TOPIC
        The topic to search for should be on a line by itself and can be a
        regular expression.
    SOURCE
        The source to search should be a multiline quoted string
        in outline form like this help text.

REVISED
    20190106 by docsalvager
"

toupper_help='
toupper STRING
    Converts any lowercase letters in STRING into uppercase and echoes.

REVISED
    20140915 docsalvage
'

trapDebug_help='
trapDebug
    Handler for DEBUG trap (if enabled) that is triggered before each and every command.
    Echoes information for command being executed.

REVISED
    20190124 by docsalvager
'

trapError_help='
trapError
    Handler for ERR trap (if enabled) that is triggered on error.
    Echoes information for command being executed.

REVISED
    20190124 by docsalvager
'

trapExit_help='
trapExit
    Handler for EXIT trap (if enabled) that is triggered on exit from a sourced
    or exected script. Echoes information for command being executed.

WARNING
  NEVER USE in a kit library script?
    trap foo EXIT
  WHY?
    EXIT is signaled when the lib script ends so calling script never runs!
      Is there a way to do not exit from inside foo() in this situation?
        By checking ${FUNCNAME[$(callStackTop)]} ?

REVISED
    20190124 by docsalvager
'

trapHangup_help='
trapHangup
    Handler for HUP trap (if enabled) that is triggered ...
    Echoes information for command being executed.

REVISED
    20190124 by docsalvager
'

trapInterrupt_help='
trapInterrupt
    Handler for INT trap (if enabled) that is triggered ...
    Echoes information for command being executed.

REVISED
    20190124 by docsalvager
'

trapMemory_help="
NAME
    trapMemory

DESCRIPTION
    Trap memory errors SIGBUS or SIGSEGV.

REVISED
    20190124 by docsalvager
"

trapQuit_help='
trapQuit
    Handler for QUIT trap (if enabled) that is triggered ...
    Echoes information for command being executed.

REVISED
    20190124 by docsalvager
'

trapTerminate_help='
trapTerminate
    Handler for TERM trap (if enabled) that is triggered ...
    Echoes information for command being executed.

REVISED
    20190124 by docsalvager
'

varAll_help="
NAME
    varAll - Prints the value of all currently set variables (sorted).

SYNOPSIS
    varAll

REVISED
    20170507 by docsalvager
"


varFind_help="
NAME
    varFind - Print internal or external variable assignment

SYNOPSIS
    varFind VAR [--metafile=\"METAFILE\"]

DESCRIPTION
    Prints a multiline variable assignment

    Prints the value of VAR if VAR is an already defined (\"internal\")
    variable. Otherwise, searches an external METAFILE (which is just a bash
    script) for a VAR=\"value\" pair. VAR may contain hyphens (-) which will be
    converted to underscores (_) before searching. Returns true(0) if VAR is found.
    Otherwise, false(1). The VAR=\"value\" pair must be a bash compliant variable
    assignment like...
        VAR_variable=\"
          value text with embedded quotes escaped...
        \"
    The value must be enclosed in double-quotes with appropriate bash escaping of
    any embedded quotes(\") or (\$). Each pair must be separated from others
    by blank lines.

EXAMPLE
    _item=\"\$(varFind \"\$_title\" --metafile=\"\$kit_DIR/\$kit_META\")\"

REVISED
    $_revised by docsalvager
"


varTrim_help="
NAME
    varTrim - Print variable value with extraneous spaces removed

SYNOPSIS
    varTrim VAR

DESCRIPTION
    Print value of VAR with leading, trailing and extra (more than one consecutive)
    internal spaces removed.

REVISED
    $_revised by docsalvager
"


version_help='
NAME
    version - Print version string.

SYNOPSIS
    version [SCRIPTNAME | FUNCTION]

DESCRIPTION
    Echo version of SCRIPTNAME(without the version#) if supplied or SCRIPTNAME
    and FUNCTION. Otherwise, echoes version of command.

REVISED
    20180215 by docsalvager
'


versionIncrement_help="
NAME
    versionIncrement - Create new version of kit script (\"bump\" the version)

        --- UNDER DEVELOPMENT ---

SYNOPSIS
    versionIncrement [--script] SCRIPT [--newversion NEWVERNUM]

DESCRIPTION
    Create the next incremental version of SCRIPT with all files and and links.

REVISED
    20190106 by docsalvager
"


versionShow_help='
NAME
    versionShow - Print version string in a dialog.

SYNOPSIS
    versionShow [SCRIPTNAME]

DESCRIPTION
    Show dialog with version of SCRIPTNAME(without the version#) if supplied.
    Otherwise, show version of command.

REQUIRES
    version

REVISED
    20180215 by docsalvager
'


working_help='
working [options]
    Shows a popup window while waiting for another process to startup.
    Options:
        YAD options compatible with --progress
            For more, see ...
                yad --help
        --timeout=SECS
            Display for SECS seconds. Default is 2.
    Similar:
        standby
REVISED
        20140915 docsalvage
'

xAt_help="
NAME
    xAt - Launch an Xwindow-based application and adjust position and/or size

SYNOPSIS
    xAt [OPTION...] --cmdline COMMANDLINE

DESCRIPTION
    GTK3 deprecates the '--geometry' option available in many GUI applications.
    This uses 'wmctrl' to replace that functionality.

OPTIONS
    --X COORDINATE
        Horizontal COORDINATE in pixels of upper left corner of window.
    --Y COORDINATE
        Vertical COORDINATE in pixels of upper left corner of window.
    --W WIDTH
        WIDTH in pixels of window.
    --H HEIGHT
        HEIGHT in pixels of window.
    --cmdline COMMANANDLINE
        Command that opens the window, followed by its arguments.

EXAMPLES
    xAt --X=0 --Y=0 --W=500 -H=600 --command antix-viewer \"file:///usr/share/doc/rox-filer/html/Manual.html\" \"ROX-Filer\"

REVISED
    $_revised by docsalvager
"

xUrgent_help="
NAME
    xUrgent - Set a window to \"urgent\" status (DEMANDS_ATTENTION)

SYNOPSIS
    xUrgent 'REGEX'

DESCRIPTION
    Find the window matching the 'REGEX' in its name(title), class, or classname
    and set it to \"urgent\" (DEMANDS_ATTENTION flag) status.

ARGUMENTS
    'REGEX'
        A Regular Expression enclosed in single-quotes that uniquely identifies
        a window by matching text in the window's name(title), class, or classname.

REVISED
    $_revised by docsalvager
"

xUrgentActive_help="
NAME
    xUrgentActive - Make the first \"urgent\" window (DEMANDS_ATTENTION) active

SYNOPSIS
    xUrgentActive

DESCRIPTION
    Derived from https://unix.stackexchange.com/a/85977/27437 answer by roomcays.

REVISED
    $_revised by docsalvager
"

xWindows_help="
NAME
    xWindows - List open windows with their pids and WM_CLASS

SYNOPSIS
    xWindows

DESCRIPTION
    Uses 'wmctrl' to list open windows with their pids and WM_CLASS.

REVISED
    $_revised by docsalvager
"


###############################################################################
#
# SUPPLIMENTAL HELP FOR EXTERNAL COMMANDS
#
###############################################################################

apcaccess="
NAME
    apcaccess - APC UPS 'access' command

SYNOPSIS
$(printAt 4 "$(command /sbin/apcaccess --help 2>&1 | tail --lines=+2 2>&1)")

RESULTS (current)
$(printAt 4 "$(command /sbin/apcaccess        2>&1)")

FILES
    /sbin/apcaccess
    /sbin/apctest
    /sbin/apcupsd

SEE ALSO
    apctest
    apcupsd

RESOURCES
    http://www.apcupsd.org/
        Software website
    https://forums.linuxmint.com/viewtopic.php?t=252490
        Detailed step-by-step for editing config files and running apcupsd

REVISED
    20200417 by docsalvager
"

apctest="
NAME
    apctest - APC UPS testing (DANGEROUS - USE CAUTION)

SYNOPSIS
    Stop 'apcupsd' daemon...
        service apcupsd stop
    Enter at commandline...
        apctest

DESCRIPTION
    Connects to the UPS and reports cable settings, etc.
    Presents menu of test/status options...
        1)  Test kill UPS power                 (WILL POWER OFF THIS HOST!!!)
        2)  Perform self-test
        3)  Read last self-test result
        4)  View/Change battery date
        5)  View manufacturing date
        6)  View/Change alarm behavior
        7)  View/Change sensitivity
        8)  View/Change low transfer voltage
        9)  View/Change high transfer voltage
        10) Perform battery calibration
        11) Test alarm
        12) View/Change self-test interval
         Q) Quit

FILES
    /sbin/apcaccess
    /sbin/apctest
    /sbin/apcupsd

SEE ALSO
    apcaccess
    apcupsd

RESOURCES
    http://www.apcupsd.org/
        Software website
    https://forums.linuxmint.com/viewtopic.php?t=252490
        Detailed step-by-step for editing config files and running apcupsd

REVISED
    20200416 by docsalvager
"

apcupsd="
NAME
    apcupsd - APC UPS monitoring and management daemon

SYNOPSIS
$(printAt 4 "$(command /sbin/apcupsd --help 2>&1)")

DESCRIPTION
    By default, presents a webpage at localhost:3551 (NOT WORKING).
    Configuration files...
        /etc/default/apcupsd
        /etc/apcupsd/apcupsd.conf
        /etc/apcupsd/apcupsd.css

FILES
    /sbin/apcaccess
    /sbin/apctest
    /sbin/apcupsd

SEE ALSO
    apcaccess
    apctest

RESOURCES
    http://www.apcupsd.org/
        Software website
    https://forums.linuxmint.com/viewtopic.php?t=252490
        Detailed step-by-step for editing config files and running apcupsd

REVISED
    20200416 by docsalvager
"

array="
NAME
    Good resources on using arrays in bash.

RESOURCES
    http://mywiki.wooledge.org/BashFAQ/006
    http://www.linuxjournal.com/content/bash-associative-arrays
    http://stackoverflow.com/questions/1063347/passing-arrays-as-parameters-in-bash
    http://stackoverflow.com/questions/16461656/bash-how-to-pass-array-as-an-argument-to-a-function

REVISED
    20170413 by docsalvager
"

aufs="
NAME
    aufs - Another Union File System layered filesystem

SYNOPSIS
    --- no commands in normal use but see FILES ---

DESCRIPTION
    Any executable or scripts (or symlink to) placed in this directory
    will be executed after the X desktop has loaded.

    This is handy if you want something to run automatically.

    You can easily create a \"symlink\" (symbolic link) to an executable.
    For example, say that you wanted to run /usr/local/bin/rubix (a game)
    everytime Puppy is started. Use ROX-Filer (the file manager) and open
    two windows, one on /usr/local/bin, the other on /root/Startup.
    Then just drag 'rubix' across and a menu will popup and ask if you want
    to copy, move or link, and you choose to link.

    Note, if you want to execute something at bootup and prior to X desktop
    loading, edit /etc/rc.d/rc.local.

      -- by bkauler

NOTES
    - Due to modifications, all files in this directory have been moved to...
        /home/DocSalvager/root/<HOSTNAME>/Startup
      and a symlink created...
        /root/Startup -> ../home/DocSalvager/root/<HOSTNAME>/Startup
      and a symlink created...
        /initrd/pup_ro1/root/Startup -> ../home/DocSalvager/root/<HOSTNAME>/Startup
      [Q] Why the second symlink?
      [A] AUFS_VERSION 2-standalone.tree-30-20090831 does not reliably support
          deletion of directories. If not explicitly set, the first symlink could
          appear WITHIN the base /root/Startup directory instead of replacing it.

FILES
    /etc/default/aufs
        Environment variables and some low-level management functions for scripts.
            source /etc/default/aufs
    /sbin/mount.aufs
        Mount an AUFS filesystem
    /sbin/umount.aufs
        Unmount an AUFS filesystem
    /sys/fs/aufs
        Properties
    /sys/module/aufs
        Properties
    /usr/share/doc/aufs.htm
        HTML Documentation

REVISED
    20171129 by docsalvager
"

awk="$(noteFind gawk)"
### alias for gawk
###   NOTE:  'awk="$gawk"' doesn't work since whole file is not being sourced
#

bash="
NAME
    Bash help and NOTES.

HELP
$(printAt 4 "$(command bash --help 2>&1)")

NOTES
    #!/bin/bash  vs.  #!/usr/bin/env bash
        '#!' (shebang) only takes the full absolute or relative path to ONE
        executable file plus ONE argument. PATH is never searched. The executable
        '/usr/bin/env' does search PATH for its COMMAND argument however.
        Passing it the one option 'bash' will run the first 'bash' executable
        found in the PATH directories. By practice, 'env' or a link to it will be
        in '/usr/bin' on most Unix/Linux systems though a few put it in '/bin'.
    Sourced scripts location
        In truth, an executing script does not actually have a canonical location.
            (see http://mywiki.wooledge.org/BashFAQ/028)
        Thus, sourced scripts (source script | . script), or a link to them, must be
        in $PATH to be reliably found. Techniques using \$BASH_SOURCE or \$0 work in
        some cases but not others. The most extreme case that will fail is when the
        script doesn't actually exist on the executing host at all, such as...
            ssh remotehost bash < ./myscript
    \$- (special variable: hyphen)
        Contains a hyphen-prefixed string where each character indicates a shell
        option provided on invocation or via the 'set' command.
        Example:
            -himBH
        Common options:
                a   automatically export all variables and functions
                h   command History on enabled (set -h)
                i   interactive session enabled (bash -i ...)
                m   Monitor processes (job control) enabled (set -m)
                B   Brace expansion enabled (set -B)
                E   'trap ... ERR' is inherited by subshell commands, command
                    substitutions, and functions (set -E)
                H   History (!) substitution enabled (set -H)
    if ... then ... else ... fi
        'if' statements with command-result-assignments like...
            if _var=\"\$(pwd)\"; then ...
        branch on the result of the command list execution inside the \$(...).
        Not the assignment return code which is always true(0) and is ignored.
        At least for bash 3.2.25(1)+ the result code of the 'if' will be the
        result of the last command in \$(list) in the following idiom...
            if VAR=\"\$(list)\"; then ...
    Arrays
        All variables are arrays. Most just usually have only 1 item. The 'declare'
        command is usually not necessary except for certain cases. Array indexes
        default to sequential if not explicitly supplied. 'Sparce' arrays (missing
        index values) are fine.
          If number of items in a variable is greater than 1, it is an array...
            var=(aaa bbb\$'\n'ccc)
            (( \${#var[@]} > 0 ))  && { echo; echo \"\${var[@]}\"; echo \"var is an array with \${#var[@]} values set\"; }

            aaa bbb
            ccc
            var is an array with 2 values set
          Items may be set to null (\"\") and each have multiple lines...
            unset a
            a[1]=arrayitem
            a[2]=\$'\n'\"multiline\"\$'\n'\"arrayitem\"\$'\n'
            a[512]=arrayitem
            echo \"  (\${#a[@]}) items...\"
            echo
            echo \"    0:\${a[0]-unset}\"
            echo \"    1:\${a[1]-unset}\"
            echo \"    2:\${a[2]-unset}\"
            echo \"    512:\${a[512]-unset}\"
              (3) items...

                0:unset
                1:arrayitem
                2:
            multiline
            arrayitem

                512:arrayitem

    Variable and Function Scope
        (In this diagram, parens delineate a Linux process.)
        ---

        bash                            ### Executes in a shell process (...)
          VAR=\"VAR\"                     ### Shell variable
          export EVAR=\"EVAR\"            ### Shell variable (exported/environment)
          source /etc/profile           ### Include as if part of bash
          source ~/.profile             ### Include as if part of bash
          source ~/.bashrc              ### Include as if part of bash
          echo \"\$VAR\"                   ### \"VAR\"
          echo \"\$EVAR\"                  ### \"EVAR\"
          script1                       ### Executes in a subshell process (...)
            SVAR=\"SVAR\"                 ### Script variable - global
            SEVAR=\"SEVAR\"               ### Script variable - global (exported)
            echo \"\$VAR\"                 ### \"\"
            echo \"\$EVAR\"                ### \"EVAR\"
            echo \"\$SVAR\"                ### \"SVAR\"
            echo \"\$SEVAR\"               ### \"SEVAR\"
            function fn1 () {           ### Declare function
              local lvar=\"lvar\"         ### Script variable - local
              local levar=\"levar\"       ### Script variable - local (exported)
              export levar
              echo \"\$VAR\"               ### \"\"
              echo \"\$EVAR\"              ### \"EVAR\"
              echo \"\$SVAR\"              ### \"SVAR\"
              echo \"\$SEVAR\"             ### \"SEVAR\"
              echo \"\$lvar\"              ### \"lvar\"
              echo \"\$levar\"             ### \"levar\"
            }
            fn1                         ### Run fn1 in same process as script1
            var=\"\$(fn1)\"                ### Run fn1 in a new subshell process
            script2                     ### Executes in a subshell process (...)
              echo \"\$VAR\"               ### \"\"
              echo \"\$EVAR\"              ### \"EVAR\"
              echo \"\$SVAR\"              ### \"\"
              echo \"\$SEVAR\"             ### \"SEVAR\"
              echo \"\$lvar\"              ### \"\"
              echo \"\$levar\"             ### \"\"

RESOURCES
    http://linux.die.net/man/1/env
    https://en.wikipedia.org/wiki/Shebang_(Unix)
    http://wiki.bash-hackers.org
    http://unix.stackexchange.com/questions/12736/how-does-usr-bin-env-know-which-program-to-use
        (answer: http://unix.stackexchange.com/a/12751/27437)
    http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_10_02.html
        10.2 Array variables

REVISED
    20190106 by docsalvager
"


bleachbit="
NAME
    bleachbit - Purge caches and other unnecessary files

SYNOPSIS
$(printAt 4 "$(command bleachbit --help 2>&1)")

RESOURCES
    Online documentation
        https://docs.bleachbit.org/

REVISED
    20190909 by docsalvager
"


bootinfoscript="
NAME
    bootinfoscript - Report a plethora of boot info

SYNOPSIS
$(printAt 4 "$(
  which bootinfoscript                                          \
    && { command bootinfoscript --help  2>&1; }                 \
    || { printf "Not found on this host (%s)" "$(hostname)"; }  \
  )"                                                            \
)

NOTES
    Installed on LX02 in /home/utilities/bootinfoscript.

REVISED
    20170809 by docsalvager
"


busybox="
$(command busybox --help)

RESOURCES
    http://www.manpagez.com/info/gawk/gawk-3.1.6/
    http://www.regular-expressions.info/reference.html

REVISED
    20190909 by docsalvager
"


byobu="
NAME
    byobu - An Ubuntu wrapper script around the 'screen' command.

DESCRIPTION
    An Ubuntu wrapper script that uses 'screen' command to divide a single
    terminal session into multiple (optionally tiled) windows and displays
    running system stats in 2 colored lines at the bottom.

SYNOPSIS
    byobu

KEYBINDINGS
    Can be user defined in  /usr/share/byobu/keybindings/ (or within .screenrc
    if byobu-export was used). The common key bindings are:

      F2 - Create a new window

      F3 - Move to previous window

      F4 - Move to next window

      F5 - Reload profile

      F6 - Detach from this session

      F7 - Enter copy/scrollback mode

      F8 - Re-title a window

      F9 - Configuration Menu

      F12 -  Lock this terminal

      shift-F2 - Split the screen horizontally

      ctrl-F2 - Split the screen vertically

      shift-F3 - Shift the focus to the previous split region

      shift-F4 - Shift the focus to the next split region

      shift-F5 - Join all splits

      ctrl-F6 - Remove this split

      ctrl-F5 - Reconnect GPG and SSH sockets

      shift-F6 - Detach, but do not logout

      alt-pgup - Enter scrollback mode

      alt-pgdn - Enter scrollback mode

      Ctrl-a $ - show detailed status

      Ctrl-a R - Reload profile

      Ctrl-a ! - Toggle key bindings on and off

      Ctrl-a k - Kill the current window

      Ctrl-a ~ - Save the current window's scrollback buffer

SEE ALSO
    meta screen

NOTES
    - WARNING - Very limited support of scrolling. Thumbwheel not reliable.
    - Installed on LX02 (Ubuntu-1004) only.

RESOURCES
    http://manpages.ubuntu.com/manpages/zesty/en/man1/byobu.1.html

REVISED
    20171111 by docsalvager
"


chown="
NAME
    chown - Command to change ownership of files and directories

SYNOPSIS
$(printAt 4 "$(command chown --help 2>&1)")

WARNING
    The --recursive(-R) option with a '.*' wildcard will include ALL files and
    directories in the '..' parent directory as well!!!
        To change a directory and its contents, including the hidden files/dirs...
            chown -R Firefox-4003:Firefox-4003 /home/Firefox-4003

REVISED
    20180108 by docsalvager
"

chmod="
NAME
    chmod - Command to change permissions of files and directories

SYNOPSIS
$(printAt 4 "$(command chmod --help 2>&1)")

WARNING
    The --recursive(-R) option with a '.*' wildcard will include ALL files and
    directories in the '..' parent directory as well!!!
        To change a directory and its contents, including the hidden files/dirs...
            chmod -R o-rwx /home/Firefox-4003

REVISED
    20180108 by docsalvager
"

chromium="
chromium
    Chromium is the community-supported version of Google's Chrome browser.
    Chromium/Chrome Keyboard Shortcuts:
        Spacebar
            Scroll down current web page
        Ctrl-Tab
            Next tab
        Ctrl-1, Ctrl-2 .. Ctrl-9
            Jump to open tab#. (Ctrl-9: Jump to last tab)
        Alt-Home
            Home page
        Alt-LeftArrow
            Go to previous page from history
        Alt-RightArrow
            Go to next page from history
        CtrlShft-B
            Show/hide the Bookmarks bar
        Ctrl-E
            Quick-search in address bar. At question mark (?) prompt, enter search term.
        Alt-F
            Main dropdown menu
        Ctrl-H
            History window
        Ctrl-J
            Downloads window
        Ctrl-K
            Quick-search in address bar. At question mark (?) prompt, enter search term.
        Ctrl-L
            Select URL in the address bar. (Use Ctrl-L,Ctl-C to quickly copy a URL.)
        Ctrl-N
          New window
        CtrlShft-N
          New incognito window (for private browsing)
        Ctrl-R
            Refresh page.
        Ctrl-T
            New tab
        CtrlShft-T
            Reopen most recently closed tab (up to 10)
        Ctrl-U
            View source of current page
        Ctrl-W
            Close current tab
RESOURCES
    http://www.howtogeek.com/113610/the-best-tips-and-tweaks-for-getting-the-most-out-of-google-chrome/

REVISED
    20161102 by docsalvager
"

conky="
NAME
    conky - System monitoring utility

SYNOPSIS
    conky OPTIONS

DESCRIPTION
    A very low-resource-using system monitoring utility that is highly configurable.

OPTIONS
$(printAt 4 "$(command conky --help 2>&1)")

NOTES
    The conky configuration file MUST be in the user's home directory as...
        ~/.conkyrc
    It will NOT be found if it is in...
        ~/.config/conkyrc

RESOURCES
    Manpage
        [Information] button below
    Online
        http://conky.sourceforge.net/documentation.html

REVISED
    20191103 by docsalvager
"

diff="
diff [OPTION]... FILE FILE
diff [OPTION]... DIR  DIR
    Report differences between two FILEs or DIRectories.

EXAMPLES:
    To report which files in 2 directories are different (without the details)
        diff -r --brief  /root  /home/DocSalvager/root/LX03

$(command diff --help 2>&1)

REVISED
    20170330 by docsalvager
"

dialog_command="
NAME
    dialog - (/usr/bin/dialog, cdialog) display textual(ncurses) dialog boxes

SYNOPSIS
$(printAt 4 "$(command /usr/bin/dialog --help 2>&1)")

NOTES
    The environment variable DIALOGRC should be set and exported in $HOME/.bashrc.
        export DIALOGRC=\"\$HOME/.config/dialogrc\"
    If DIALOGRC is not set, /user/bin/dialog looks for configuration in...
        /etc/dialogrc
        \$HOME/.dialogrc

SEE ALSO
    The 'dialog*' kit functions which use /usr/bin/dialog if a more capable
    command is not available.

RESOURCES
    http://linuxcommand.org/lc3_adv_dialog.php
    http://invisible-island.net/dialog/manpage/dialog.html
    http://invisible-island.net/dialog/manpage/dialog.txt
    https://linux.die.net/man/1/dialog
    https://bash.cyberciti.biz/guide/Bash_display_dialog_boxes

REVISED
    20190523 by docsalvager
"

du="
$(command du --help 2>&1)

WARNING:
    For size to be printed in human readable form...
        ...options...
            -k / --block-size=1k
        ...MUST appear before options...
            -h / --human-readable

REVISED
    20161206 by docsalvager
"

env="
$(command env --help 2>&1)

EXAMPLES:
    Search PATH for script interpreter
        #!/usr/bin/env bash
            Here, 'bash' is the COMMAND argument to '/usr/bin/env'. No arguments
            to 'bash' are possible since '#!' (shebang) only takes the full
            absolute or relative path to an executable file plus one argument.
            '/usr/bin/env' does search PATH for COMMAND however. By practice,
            'env' or a link to it is included in '/usr/bin' on most Unix/Linux
            systems. (Note though that a few Unix systems put it in '/bin')

RESOURCES:
    http://linux.die.net/man/1/env
    https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps
    https://en.wikipedia.org/wiki/Shebang_(Unix)
    http://unix.stackexchange.com/questions/12736/how-does-usr-bin-env-know-which-program-to-use
        (answer: http://unix.stackexchange.com/a/12751/27437)

REVISED
    20160727 by docsalvager
"

ethtool="
NOTES:
    'Link partner'
        Will be the router port the PC ethernet port is connected to.
    'Auto-negotiation'
        The two ports automatically negotiate the best speed and duplex.
        Can be turned off is speed is set...
            ethtool --change eth0 autoneg off speed 100 duplex full

$(command ethtool --help 2>&1)

REVISED
    20161019 by docsalvager
"

find="
NAME
    find -

SYNOPSIS
    find OPTIONS

DESCRIPTION
$(printAt 4 "$(command find --help)")

NOTES
    -regextype TYPE
        (Undocumented. Found by entering the invalid command 'find -regextype help'.)
        TYPE is one of...
            awk
            ed
            egrep
            emacs
            findutils-default
            gnu-awk
            grep
            posix-awk
            posix-basic
            posix-egrep
            posix-extended
            posix-minimal-basic
            sed

EXAMPLES
    Find all files on system accessed in the last 60mins but exclude any containing
    one of the listed strings...
        find / -regextype egrep -regex '.*(cache|initrd|mozilla|proc|sys).*' -prune -o -amin -60 -print
            Explanation...
                find / -regextype egrep
                    Start search at the root '/' directory and use extended regex
                -regex '.*(cache|initrd|mozilla|proc|sys).*' -prune
                    Ignore paths containing one of these (cache, initrd, ...) strings
                -o
                    Logical OR
                -amin -60 -print
                    Print path of files accessed within the last 60 minutes.

RESOURCES
    http://man7.org/linux/man-pages/man1/find.1.html

REVISED
    20171228 by docsalvager
"


flock="
$(command flock --help 2>&1)

RESOURCES:
    http://linux.die.net/man/1/flock

REVISED
    20160617 by docsalvager
"

gawk="
NAME
    gawk(awk) - GNU Awk language

VERSION
$(printAt 4 "$(command gawk --version)")

DESCRIPTION
$(printAt 4 "$(command gawk --help 2>&1)")

RESOURCES
    http://www.manpagez.com/info/gawk/3.1.6/
    http://www.regular-expressions.info/reference.html

REVISED
    20170927 by docsalvager
"

geany="
geany [OPTION...] [FILES...]
    Geany integrated development environment (IDE).

NOTES:
    Configuration - Set Build Commands
        Changes here are saved to the '[build-menu]' section of the filedefs
        config for the currently selected file, for example...
            /root/.config/geany/filedefs/filetypes.sh
        until Geany is closed. At that point, they are moved to...
            /root/.config/geany/geany.conf

VERSION:
    $(command geany --version)

HELP:
$(printAt 4 "$(command geany --help-all 2>&1)")

REVISED
    20190907 by docsalvager
"

grep="
$(command grep --version)

$(command grep --help 2>&1)

NOTES:
    FILE_PATTERN
        Filename \"globbing\" pattern matching which can use *, ?, and [...]  as
        wildcards, and \ to quote a wildcard  or  backslash  character literally.
    PATTERN
        Extended Regular Expression (ERE for grep -E) matching.

RESOURCES:
    * http://www.manpagez.com/info/grep/grep-2.5.4/

REVISED
    20161230 by docsalvager
"

gnome_terminal="
NAME
    gnome-terminal - Start gnome-terminal

SYNOPSIS
    gnome-terminal [OPTIONS]

DESCRIPTION
    Starts gnome-terminal using certain locale and environment settings.

HELP
$(printAt 4 "$(which gnome-terminal >/dev/null  &&
    { gnome-terminal --version; gnome-terminal --help-all 2>&1; }  ||
    { printAt 4 "gnome-terminal not installed."; }
  )"
)

WARNING:
    --tab
        This option DOES NOT WORK like roxterm's --tab. It will not open a tab
        in an existing gnome-terminal window. It only allows opening multiple
        tabs when gnome-terminal is started.
    --execute
        Runs ONE command instead of a terminal session. To see output, must
        include --profile=Hold.

RESOURCES:
    * http://www.opensolarisforum.org/man/man1/gnome-terminal.html

REVISED
    20191003 by docsalvager
"

gtkdialog="
NAME:
    gtkdialog - GTK+ dialog markup language

SYNOPSIS:
    See Zim Notebook \"Code\".

DESCRIPTION:
    A GTK+ dialog markup language.

HELP:
$(printAt 4 "$(command gtkdialog --help-all)")

RESOURCES:
    Color Names:
        /usr/share/X11/rgb.txt
    http://blogs.czapski.id.au/2017/04/gtkdialog-exploring-the-window-object

REVISED
    20170510 by docsalvager
"


gtkdialog_splash="
$(command gtkdialog-splash --help 2>/dev/null)

RESOURCES:
    Color Names:
        /usr/share/X11/rgb.txt

REVISED
    20190107 by docsalvager
"

gtk_encode_symbolic_svg="
NAME
    gtk-encode-symbolic-svg - convert symbolic svg icons into colorable png files

SYNOPSIS
$(printAt 4 "$(gtk-encode-symbolic-svg --help 2>&1)")

REVISED
    20190508 by docsalvager
"



gxmessage="
NAME
    gxmessage - Minimal GUI dialog

SYNOPSIS
$(printAt 4 "$(gxmessage -help 2>&1)")

REVISED
    20190107 by docsalvager
"

hgrep="
NAME
    hgrep - List commands from history containing a given regex

SYNOPSIS
    hgrep OPTIONS REGEX

DESCRIPTION
    A Bash alias set in /root/.bashrc that lists commands from history matching
    REGEX. It cannot be a script since must run in current shell and a script
    runs in a subshell.
        alias='history | grep '

OPTIONS
    All grep options.

REVISED
    20171228 by docsalvager
"


hiawatha="
NAME
    hiawatha - Highly secure web server

SYNOPSIS
    hiawatha OPTIONS

HELP
$(printAt 4 "$(command hiawatha -h 2>&1)")

VERSION
$(printAt 4 "$(command hiawatha -v 2>&1)")

RESOURCES
    Manpage (online)
        https://www.hiawatha-webserver.org/manpages/hiawatha

REVISED
    20170525 by docsalvager
"


iftop="
NAME
    iftop - curses-based network monitor

SYNOPSIS
    iftop -h | [-nNpblBP] [-i interface] [-f filter code] [-F net/mask] [-G net6/mask6]

HELP
$(printAt 4 "$(command iftop -h 2>&1)")

SEE ALSO
    For full syntax of network monitoring filter codes used by most all utilities...
        man pcap-filter

REVISED
    20190905 by docsalvager
"


jwm="
NAME
    jwm - Joe's Window Manager (Puppy Linux)

SYNOPSIS:
    jwm [OPTION...]

HELP
$(printAt 4 "$(command jwm -h 2>&1)")

VERSION
$(printAt 4 "$(command jwm -v 2>&1)")

NOTES
    To shade a window
        Move pointer over the titlebar and scroll up. Scroll down to unshade.

RESOURCES
    Configuration Guide
        https://joewing.net/projects/jwm/config.shtml

REVISED
    20170619 by docsalvager
"


kill="
NAME
    kill - Send signal to a process (usually to kill the process)

SYNOPSIS
$(printAt 4 "$(command kill 2>&1)")

DESCRIPTION
    (A bash builtin) Send signal to a process (usually to kill the process).

$(printAt 4 "$(command help kill 2>&1)")

NOTES
    - A PID(process ID) of 0 is the current parent process (\$PPID).
    - A SIG(signal) of 0 causes no signal to be sent but error checking
      to still be performed and so can be used to test if user is permitted
      to kill a process or if the process even exists.

REVISED
    20191101 by docsalvager
"


leafpad="
NAME
    leafpad - Simple text editor

SYNOPSIS
$(printAt 4 "$(command leafpad --help-all 2>&1)")

CONFIGURATION
    Current ($HOME/.config/leafpad/leafpadrc)...
$(printAt 8 "$(<$HOME/.config/leafpad/leafpadrc)")

REVISED
    20190910 by docsalvager
"


ls="
NAME
    ls - List files in directory

SYNOPSIS
$(printAt 4 "$(command ls --help 2>&1)")

NOTES
    -F | --classify
        Append symbols to filenames indicating the file type...
            @   symbolic link (or that the file has extended attributes)
            *   executable
            =   socket
            |   named pipe
            >   door
            /   directory

HOWTO
    List files with quotes around each filename...
        ls --quoting-style={escape,shell,c}

RESOURCES
    http://www.commandlinefu.com/commands/view/6347/list-files-with-quotes-around-each-filename

REVISED
    20180206 by docsalvager
"


mkdir="
$(command mkdir --help 2>&1)

HOWTO:
    Recreate a missing target directory of a broken symlink ...
        mkdir -p /SYMLINK/TO/MISSING/DIRECTORY
    Recreate a missing file of a broken symlink ...
        touch    /SYMLINK/TO/MISSING/FILE

RESOURCES:
    http://linux.die.net/man/1/mkdir

REVISED
    20160806 by docsalvager
"


mapfile="
NAME
    mapfile - bash builtin that reads stdin into an indexed array.

$(help mapfile)

REVISED
    20170413 by docsalvager
"


namei="
NAME:
    namei - List all components of a path including each symbolic link (symlink).

SYNOPSIS:
    namei [OPTIONS] PATHNAME

DESCRIPTION:
    List all components of a PATHNAME including each symbolic link (symlink).

WARNING:
    20170525
        Fails on Puppy Linux 5.2.8 with the error...
            namei: could not stat 'initrd': No such file or directory
    20171108
        ONLY INSTALLED ON LX03.
            No longer fails on LX03. Do not know why.

OPTIONS:
$(printAt 4 "$(command namei --help 2>&1)")

RESOURCES:
    http://linux.die.net/man/1/namei

REVISED
    20171108 by docsalvager
"


nmap="
NAME:
    nmap - Network query tool

SYNOPSIS:
    nmap [OPTION...] ADDRESS

DESCRIPTION:
    Scan network.

OPTIONS:
$(printAt 4 "$(command nmap --help 2>&1)")

RESOURCES:
    https://www.stationx.net/nmap-cheat-sheet/

REVISED
    20191017 by docsalvager
"


passwd="
passwd [options] [LOGIN]
$(printAt 4 "$(command passwd --help 2>&1 | tail -n+3)")

    Option -S --status output format:
        username
        status
            L   Locked
            P   Password
            NP  No Password
        date of last modification
        age in days - minimum       (    0 = none    )
        age in days - maximum       (99999 = infinity)
        days in warning period
        days of inactivity          (   -1 = infinity)

REVISED
    20160817 by docsalvager
"


printf="
$(help printf)

NOTES:
    Multi-Invocation
        If more arguments are supplied than format placeholders (%s, %d, ...),
        then bash printf will be invoked again as often as is necessary
        to use up all the arguments. Thus, the single statement...
            printf \"%s  %s\\n\" \"a\" \"b\" \"c\"
        will print
            a  b
            c

RESOURCES:
    http://linux.die.net/man/3/printf
    http://wiki.bash-hackers.org/commands/builtin/printf

REVISED
    20161207 by docsalvager
"


pam="
PAM - Pluggable Authentication Modules

NOTES:
    - If /etc/pam.d exists, /etc/pam.conf is ignored.

RESOURCES:
    https://linux.die.net/man/8/pam
    https://linux.die.net/man/5/pam.d

REVISED
    20161010 by docsalvager
"


pam_auth_update="
NAME
    pam-auth-update - Pluggable Authentication Modules Authorization Update

          *** WARNING - No HELP Option. Use manpage ***

SYNOPSIS
    pam-auth-update [OPTION]

DESCRIPTION
    A whiptail-based ncurses script for selectively updating PAM authorizations.

REVISED
    20190912 by docsalvager
"


read="
HOWTO:
    To read input from terminal, even if in a subshell or pipeline, ...
          read -p \"\$_prompt\" _input  < /dev/tty
          ### accept user input from terminal
          ### '< /dev/tty' required in case called in pipeline or other redirect of STDIN

$(help read)

NOTES:
  - READ CANNOT ACCEPT INPUT FROM A PIPE...
        var=\"aaa bbb ccc\"; echo \"\$var\" | read var1 var2 var3 ### does not work!
    (per http://wiki.bash-hackers.org/commands/builtin/read)
      Since each pipe command runs in a subshell, it cannot modify the parent shell.
      Thus, the variables read into are not visible to the parent shell.
      See also 'Bash and the process tree' at...
          http://wiki.bash-hackers.org/scripting/processtree

REVISED
    20170201 by docsalvager
"


readarray="
NAME
    readarray - bash builtin alias for mapfile

ALIAS OF
$( printAt 4 "$(noteFind mapfile --file="$kit_DIR/$kit_META")" )

REVISED
    20180815 by docsalvager
"


roxterm="
roxterm
ROXTerm Terminal Emulator ( Puppy Linux 5.2.8 uses RoxTerm version 1.18.5 )

$(which roxterm >/dev/null  &&
  { roxterm --help-all 2>&1; }  || { printAt 4 "roxterm not installed."; }
)

NOTES:
    Opening programmatically
        Have abandoned attempts to open terminal sessions with roxterm and
        gnome-terminal from a bash script twice. Latest was 20170208 with kit-040.
    --execute
        Runs ONE command instead of a terminal session. To see output, must
        include --profile=Hold.
    Preferences >> Configuration >> Profile >> Windows/Tabs >> Title
        per https://sourceforge.net/p/roxterm/svn/837/tree/branches/roxterm-1.18.5/po/en.po ...
            The title string may include '%s' which is substituted with the
            title set by the child command (usually the current directory for
            shells). No other % characters or sequences are permitted except
            '%%' which is displayed as a single %.

REVISED
    20170322 by docsalvager
"


relink="\
$(relink -h)

SEE ALSO:

ln  - Standard link command.

$(ln --help 2>&1)

REVISED
    20170304 by docsalvager
"

rsync="
rsync
    Remote synchronize.

NOTES
    --include/--exclude rules
        Rsync processes --include and --exclude options in the order they appear
        on the commandline. If they contain wildcards, rsync STOPS PROCESSING
        --include/--exclude ON THE FIRST MATCH.

EXAMPLES
    To sync only files ending with the extension '.yaml' ...
        rsync ... --include='*.yaml' --exclude='*'

RESOURCES
    http://ss64.com/bash/rsync.html
    https://linux.die.net/man/1/rsync
    http://linuxcommand.org/man_pages/rsync1.html
    http://www.computerhope.com/unix/rsync.htm
    for ryncd.conf...
        http://man7.org/linux/man-pages/man5/rsyncd.conf.5.html

REVISED
    20161207 by docsalvager

--- HELP $(hostname) -----------------------------------------------------------

$(rsync 2>&1)
"

runlevel="
runlevel
    Print the previous and current runlevels.
    A previous run level of 'N' means no changes have occurred since reboot.

    This host (\$(hostname)), is running \$(
        D=\"\$(head -n1 /etc/issue)\";
        D=\"\${D/\\n}\";
        D=\"\${D/\\l*/. Session tty is \$(tty)}\";
        D=\"\${D/Lucid  Linux/Puppy Linux (based on Ubuntu 10.04)}\";
        D=\"\${D/  /}\";
        printf \"%s\n\n\" \"\$D\";
        printAt 4 \"\$([[ \"\$D\" =~ ^Puppy.Linux ]] && printf \"%s\" \"No run levels. Prints equivalents.\" || printf \"%s\" \"\$(runlevel --help 2>&1)\")\";
    )

RESOURCES:
    http://www.pathbreak.com/blog/ubuntu-startup-init-scripts-runlevels-upstart-jobs-explained
    http://stackoverflow.com/questions/16227792/runlevel-2-and-5-works-the-same-on-ubuntu
    http://www.debianadmin.com/debian-and-ubuntu-linux-run-levels.html

REVISED
    20160906 by docsalvager
"

rxvt="
$(command rxvt -help  2>&1)

$(command rxvt --help 2>&1)

RESOURCES:
    https://wiki.archlinux.org/index.php/Rxvt-unicode

REVISED
    20170114 by docsalvager
"


scp="
scp
    Secure copy.
    Options ($(hostname)):
$(printAt 8 "$(scp 2>&1)")

REVISED
    20161207 by docsalvager


--- MANPAGE (LX02) ------------------------------------------------------------

$(ssh LX02 man scp 2>&1)
"


screen="
NAME
    screen - Uses ncurses to manage multiple terminal windows

SYNOPSIS
    screen

DESCRIPTION
    The 'screen' command uses ncurses to divide a single terminal session into
    multiple (optionally tiled) windows and display colored text.

NOTES
    - WARNING - Very limited support of scrolling. Thumbwheel not reliable.
    - Installed on LX02 (Ubuntu-1004) only.

SEE ALSO
    meta byobu

RESOURCES
    http://manpages.ubuntu.com/manpages/zesty/en/man1/byobu.1.html

REVISED
    20171111 by docsalvager
"


set="
NAME
    set - Bash builtin to set/unset bash options

DESCRIPTION
    Change the value of shell attributes and positional parameters, or display
    the names and values of shell variables.

SYNOPSIS
$(printAt 4 "$(help set)")

NOTES
    Using 'set -e' to exit on any command list failure...
        When using 'set -e', command lists containing commands that may fail
        (have non-zero return code) MUST be terminated with something that is
        always true (like '|| true') in order to prevent the script from exiting...
            set -e
              :
            if ...; then
              <do something>  || true
              ### if <do something> fails, script would exit without the '|| true'
            else
              <do otherthing> || true
              ### if <do otherthing> fails, script would exit without the '|| true'
            fi

SEE ALSO
    Click [Information] button to find manpage for details.

REVISED
    20191005 by docsalvager
"


ssh="
NAME
    ssh - Secure shell.

VERSION
$(printAt 4 "$(ssh -v 2>&1 | head -n1)")

SYNOPSIS
    Options ($(hostname)):
$(printAt 8 "$(ssh 2>&1)")

REVISED
     20171102 by docsalvager


--- MANPAGE (LX02) ------------------------------------------------------------

$(ssh LX02 man ssh 2>&1)
"

symlinks="
NAME
    sysmlinks - List or cleanup symbolic links

DESCRIPTION
    Lists symlinks on stdout, optionally revealing problems.

OPTIONS
$(printAt 8 "$(command symlinks 2>&1)")

NOTES
  per https://linux.die.net/man/8/symlinks (reformatted)
      Each link is output with a classification of relative, absolute, dangling,
      messy, lengthy, or other_fs.
        relative
            Relative links are those expressed as paths relative to the directory
            in which the links reside, usually independent of the mount point of
            the filesystem.
        absolute
            Absolute links are those given as an absolute path from the root
            directory as indicated by a leading slash (/).
        dangling
            Dangling links are those for which the target of the link does not
            currently exist. This commonly occurs for absolute links when a
            filesystem is mounted at other than its customary mount point (such as
            when the normal root filesystem is mounted at /mnt after booting from
            alternative media).
        messy
            Messy links are links which contain unnecessary slashes or dots in
            the path. These are cleaned up as well when -c is specified.
        lengthy
            Lengthy links are links which use \"../\" more than necessary in the
            path (eg. /bin/vi -> ../bin/vim) These are only detected when -s is
            specified, and are only cleaned up when -c is also specified.
        other_fs
            Other_fs are those links whose target currently resides on a different
            filesystem from where symlinks was run (most useful with -r ).

REVISED
    20180415 by docsalvager
"


tidy="
$(command tidy -version     2>&1)

$(command tidy -help        2>&1)

$(command tidy -help-config 2>&1)

$(command tidy -show-config 2>&1)

RESOURCES:
    http://linux.die.net/man/1/tidy

REVISED
    20170407 by docsalvager
"


tint2="
NAME
    tint2 - Desktop panels, taskbars, etc.

SYNOPSIS
    tint2conf

    tint2 [OPTION...]

OPTIONS
$(printAt 4 "$(tint2 -h 2>&1)")

UNDOCUMENTED OPTIONS
    The following undocumented options are revealed in the source code at...
        https://gitlab.com/o9000/tint2/blob/master/src/init.c
    -s SNAPSHOT_FILE
        Path to a 'snapshot' file?
        CODE...
            if (i + 1 < argc) {
                i++;
                snapshot_path = strdup(argv[i]);
    --test
          CODE...
              run_all_tests(false);
    --test-verbose
          CODE...
              run_all_tests(true);
    --dump-image-data
          CODE...
              dump_image_data(argv[i+1], argv[i+2]);
    --battery-sys-prefix
          CODE...
            #ifdef ENABLE_BATTERY
                    else if (strcmp(argv[i], \"--battery-sys-prefix\") == 0) {
                        if (i + 1 < argc) {
                            i++;
                            battery_sys_prefix = strdup(argv[i]);
                        } else {
                            error = TRUE;
                        }
                    }

UNDOCUMENTED ENVIRONMENT VARIABLES
    The following undocumented environment variables may be set to trigger various debug output...
        DEBUG_GEOMETRY
        DEBUG_GRADIENTS
        DEBUG_ICONS
        DEBUG_FPS
        DEBUG_FPS and TRACING_FPS_THRESHOLD
        DEBUG_FRAMES
        DEBUG_DND
        DEBUG_THUMBNAILS
        DEBUG_TIMERS
        DEBUG_EXECUTORS
        DEBUG_BLINK
        TINT2_THUMBNAIL_SHM


EXAMPLES
    Set the window DEMANDS_ATTENTION flag (for detecting and changing the tint2 task button appropriatly)
        xdotool search 'Tint2 panel themes' set_window --urgency 1

SEE ALSO
    [Information] button for extensive details in the manpage.

RESOURCES
    https://gitlab.com/o9000/tint2
    https://unix.stackexchange.com/a/85977/27437
    https://forums.bunsenlabs.org/
        Great source for info on conky, tint2 and a lot more!

REVISED
    20191108 by docsalvager
"


touch="
$(command touch --help 2>&1)

HOWTO:
    Recreate a missing file of a broken symlink ...
        touch    /SYMLINK/TO/MISSING/FILE
    Recreate a missing target directory of a broken symlink ...
        mkdir -p /SYMLINK/TO/MISSING/DIRECTORY

RESOURCES:
    http://linux.die.net/man/1/touch

REVISED
    20160806 by docsalvager
"


urxvt="
$(command urxvt -help  2>&1)

$(command urxvt --help 2>&1)

RESOURCES:
    https://wiki.archlinux.org/index.php/Rxvt-unicode

REVISED
    20170114 by docsalvager
"

vttest="
NAME
    vttest - Numerous terminal tests

SYNOPSIS
    vttest [-l] [-p] [-8] [-f font] [24x80.132]

NOTES
    20170809  Installed from repositories on DOCSAL (Ubuntu 16.04) and LX02 (Ubuntu 10.04)

RESOURCES:
    http://invisible-island.net/vttest

REVISED
    20170809 by docsalvager
"


whiptail="
NAME
    whiptail - Text-based(ncurses) dialogs with better color customizing support.

SYNOPSIS

$(which whiptail >/dev/null  && command whiptail --help  2>&1)

DESCRIPTION - COLORS
(per the AskUbuntu.com RESOURCE)

    Default colors are stored in text files in /etc/newt and named palette[.anything].
        /etc/next/palette.ubuntu

    The structure of the definitions is:
        name=[fg],[bg][;|:|\n|\r|\t]name2=[fg],[bg]]...

    Name can be:
        root                  root fg, bg
        border                border fg, bg
        window                window fg, bg
        shadow                shadow fg, bg
        title                 title fg, bg
        button                button fg, bg
        actbutton             active button fg, bg
        checkbox              checkbox fg, bg
        actcheckbox           active checkbox fg, bg
        entry                 entry box fg, bg
        label                 label fg, bg
        listbox               listbox fg, bg
        actlistbox            active listbox fg, bg
        textbox               textbox fg, bg
        acttextbox            active textbox fg, bg
        helpline              help line
        roottext              root text
        emptyscale            scale full
        fullscale             scale empty
        disentry              disabled entry fg, bg
        compactbutton         compact button fg, bg
        actsellistbox         active & sel listbox
        sellistbox            selected listbox

    bg and fg can be:
        color0  or black
        color1  or red
        color2  or green
        color3  or brown
        color4  or blue
        color5  or magenta
        color6  or cyan
        color7  or lightgray
        color8  or gray
        color9  or brightred
        color10 or brightgreen
        color11 or yellow
        color12 or brightblue
        color13 or brightmagenta
        color14 or brightcyan
        color15 or white

    Example displaying a message box with red window background:
        #!/bin/sh

        NEWT_COLORS='
          window=,red
          border=white,red
          textbox=white,red
          button=black,white
        '
        whiptail --msgbox \"passwords don't match\" 0 0

    Appending to ubuntu colors:
        #!/bin/bash

        readarray -t newtcols < /etc/newt/palette

        newtcols_error=(
           window=,red
           border=white,red
           textbox=white,red
           button=black,white
        )

        NEWT_COLORS=\"\${newtcols[@]} \${newtcols_error[@]}\" \
        whiptail --msgbox \"passwords don't match\" 0 0

    Note:
        Setting an invalid color to an element makes it black.
            root=,mageta
        The misspelling for magenta would make the root window black.

RESOURCES:
    https://askubuntu.com/a/781062/95347
        (SE) AskUbuntu.com
          [Q] Whiptail change background color dynamically from magenta?
          [A] Jun 2 '16 at 20:01 by user448115

REVISED
    20170808 by docsalvager
"


wmctrl="
NAME
    wmctrl - Commandline window manager control

SYNOPSIS
$(printAt 4 "$(command wmctrl --help 2>&1)")

NOTES
    EWMH Specification for <MVARG>
        G (gravity)
            0   use WM_SIZE_HINTS.win_gravity
            1   Northwest
            2   North
            3   Northeast
            4   West
            5   Center
            6   East
            7   Southwest
            8   South
            9   Southeast
            10  static
        X (horozontal in pixels)
        Y (vertical   in pixels)
        W (width      in pixels)
        H (height     in pixels)

RESOURCES:
    https://specifications.freedesktop.org/wm-spec/wm-spec-1.3.html

REVISED
    20191010 by docsalvager
"


xargs="
NAME
    xargs - manage arbitrarily long lists of files to submit to commands

DESCRIPTION
    Overcomes command argument problems like the error, \"Argument list too long\".
    NOTE:
      The 'find' command option '... exec COMMAND '{}' +' does the same thing
      so 'xargs' may no longer be needed as it suffers from a number of problems
      (see Wikipedia resource below).

SYNOPSIS
    ... | xargs COMMAND OPTION...
        The input piped to 'xargs' is usually a list of files output by 'find',
        'ls', or 'grep'. The list is broken into groupings, staying within the
        filesystems buffering limits. Then the command is executed for each group.

$(printAt 4 "$(command xargs --help 2>&1)")

EXAMPLE
    ls -1 .archives/* | xargs chmod 600

RESOURCES
    https://en.wikipedia.org/wiki/Xargs

REVISED
    20170930 by docsalvager
"


xclip="
NAME
    xclip - Copy data to clipboard

SYNOPSIS
$(printAt 4 "$(command xclip -h 2>&1)")

DESCRIPTION
    Copy data into Xwindows clipboards for pasting into any window.

REVISED
    20191011 by docsalvager
"


xdotool="
NAME
    xdotool - Manipulate windows

SYNOPSIS
    xdotool COMMAND...

COMMANDS
$(printAt 4 "$(command xdotool -h 2>&1)")

DESCRIPTION
    Prints properties of and manipulates windows, outputs keystokes, etc.

REVISED
    20191011 by docsalvager
"


xhost="
NAME
    xhost - Add/Delete users that can connect to the X server

SYNOPSIS
    xhost [[+-]NAME ...]

REVISED
    20181102 by docsalvager


--- MANPAGE (LX02) ------------------------------------------------------------

$(ssh LX02 man xhost 2>&1)
"


Xorg="
X    [OPTION...]
Xorg [OPTION...]
(a.k.a. Xserver or xserver)
    Per xserver(1) manpage (https://linux.die.net/man/1/xserver)...
      Description
        X is the generic name for the X Window System display server. It is
        frequently a link or a copy of the appropriate server binary for driving
        the most frequently used server on a given machine.
      Starting The Server
        The X server is usually started from the X Display Manager program xdm(1)
        or a similar display manager program. This utility is run from the system
        boot files and takes care of keeping the server running, prompting for
        usernames and passwords, and starting up the user sessions.
        Installations that run more than one window system may need to use the
        xinit(1) utility instead of a display manager. However, xinit is to be
        considered a tool for building startup scripts and is not intended for
        use by end users. Site administrators are strongly urged to use a
        display manager, or build other interfaces for novice users.
OPTIONS (selected):
    :displaynumber
        The X server runs as the given displaynumber, which by default is 0. If
        multiple X servers are to run simultaneously on a host, each must have a
        unique display number. See the DISPLAY NAMES section of the x(7) manual page
        to learn how to specify which display number clients should try to use.
    -audit level
        sets the audit trail level. The default level is 1, meaning only
        connection rejections are reported. Level 2 additionally reports all
        successful connections and disconnects. Level 4 enables messages
        from the SECURITY extension, if present, including generation and
        revocation of authorizations and violations of the security policy.
        Level 0 turns off the audit trail. Audit lines are sent as standard
        error output.
    -auth authorization-file
        specifies a file which contains a collection of authorization records used
        to authenticate access. See also the xdm(1) and xsecurity(7) manual pages.
    -br
        sets the default root window to solid black instead of the standard root
        weave pattern. This is the default unless -retro or -wr is specified.

EXAMPLES:
    LX04
        /usr/bin/X :0 -br -audit 0 -auth /var/lib/gdm/:0.Xauth

RESOURCES:
    https://linux.die.net/man/1/xserver

REVISED
    20161115 by docsalvager
"


xterm="
xterm OPTIONS...

OPTIONS ( short options are prefixed with a single hyphen(-) )
--------------------------------------------------------------
$(printAt 2 "$(command xterm -help 2>&1)")


RESOURCES ( long options are prefixed with double hyphens(--) )
-----------------------------------------------------------------
$(command xterm --help 2>&1)

NOTES:
    Ubuntu 8.04 and 10.04
        xterm must be setgid. This is a major vulnerability that generated much
        discussion online and eventual redesign to eliminate the requirement.
    PuppyLinux 5.2.8
        xterm is a script that adds support for -hold option before calling rxvt
        which does not require setgid.

REVISED
    20160817 by docsalvager
"


xmessage="
NAME
    xmessage - Rudimentary Xwindow message dialog

SYNOPSIS
    xmessage [OPTION...] \"MESSAGE\"

HELP
$(printAt 4 "$(command xmessage 2>&1)")

REVISED
    20170510 by docsalvager
"


csv2="
NAME
    csv2  - Filter to convert a CSV file to an intermediate flat file

SYNOPSIS
    csv2 [-f] [-q QUOTE] [-d DELIMITER] < INFILE > OUTFILE

DESCRIPTION
    One of a set of six utilities for converting files between XML and CSV format.
        xml2  - convert XML to an intermediate flat file (usually piped to 2csv)
        2xml  - convert intermediate flat file to XML (usually piped from csv2)
        html2 - convert HTML to an intermediate flat file (usually piped to 2csv)
        2html - convert intermediate flat file to HTML (usually piped from csv2)
        csv2  - convert CSV to an intermediate flat file (usually piped to 2xml)
        2csv  - convert intermediate flat file to CSV (usually piped from xml2)

ARGUMENTS
    -d DELIMITER
        A single-quoted single character to treat as field delimiter in INFILE.
    -f
        UNKNOWN. Does something with the first record.
    -q QUOTE
        A single-quoted single character to treat as the beginning and ending
        quote around values.
    INFILE
        Redirect input from a CSV file.
    OUTFILE
        Redirect output to an intermediate flat file.

HELP
$(printAt 4 "$(command csv2 -h 2>&1)")

RESOURCES
    xml2 manpage
        https://www.unix.com/man-page/debian/1/XML2/
    csv2/2csv options
        https://groups.google.com/forum/#!topic/linux.debian.bugs.dist/RV419BysYNo

REVISED
    20180815 by docsalvager
"


xml2="
NAME
    xml2  - Filter to convert an XML  file to a flat file
    html2 - Filter to convert an HTML file to a flat file

SYNOPSIS
    xml2  < INFILE > OUTFILE
    html2 < INFILE > OUTFILE

DESCRIPTION
    One of a set of six utilities for converting files between XML and CSV format.
        xml2  - convert XML to an intermediate flat file (usually piped to 2csv)
        2xml  - convert intermediate flat file to XML (usually piped from csv2)
        html2 - convert HTML to an intermediate flat file (usually piped to 2csv)
        2html - convert intermediate flat file to HTML (usually piped from csv2)
        csv2  - convert CSV to an intermediate flat file (usually piped to 2xml)
        2csv  - convert intermediate flat file to CSV (usually piped from xml2)

ARGUMENTS
    INFILE
        Redirect input from intermediate flat file created by csv2.
    OUTFILE
        Redirect output to create an XML or HTML file of this name.

RESOURCES
    xml2 manpage
        https://www.unix.com/man-page/debian/1/XML2/
    csv2/2csv options
        https://groups.google.com/forum/#!topic/linux.debian.bugs.dist/RV419BysYNo

REVISED
    20181128 by docsalvager
"


html2="\
$(noteFind xml2 --file="$kit_DIR/$kit_META")\
"


_2csv="
NAME
    2csv  - Filter to convert an intermediate flat file to a CSV file

SYNOPSIS
    2csv [-q QUOTE] [-d DELIMITER] RECORD FIELD [FIELD ...] < INFILE > OUTFILE

DESCRIPTION
    One of a set of six utilities for converting files between XML and CSV format.
        xml2  - convert XML to an intermediate flat file (usually piped to 2csv)
        2xml  - convert intermediate flat file to XML (usually piped from csv2)
        html2 - convert HTML to an intermediate flat file (usually piped to 2csv)
        2html - convert intermediate flat file to HTML (usually piped from csv2)
        csv2  - convert CSV to an intermediate flat file (usually piped to 2xml)
        2csv  - convert intermediate flat file to CSV (usually piped from xml2)

ARGUMENTS
    -d DELIMITER
        A single-quoted single character to treat as field delimiter in INFILE.
    -q QUOTE
        A single-quoted single character to treat as the beginning and ending
        quote around values.
    RECORD
        Text that is common to the beginning of every line in INFILE to convert
        (in this pass?)
    FIELD [FIELD ...]
        Text that follows RECORD and is unique to each line in INFILE to convert
        (in this pass?)
    INFILE
        Redirect input from intermediate flat file created by html2 or xml2.
    OUTFILE
        Redirect output to create an CSV file of this name.

EXAMPLE
    BASE=\"TextCommonToAllFields\"
    FIELDS=\"
    UniqueTextOfField1
    UniqueTextOfField2
    UniqueTextOfField3
        :
    \"
    #
    xml2 < inputfile.xml | 2csv -d',' $BASE $FIELDS > outputfile.csv

HELP
$(printAt 4 "$(command 2csv 2>&1)")

RESOURCES
    xml2 manpage
        https://www.unix.com/man-page/debian/1/XML2/
    csv2/2csv options
        https://groups.google.com/forum/#!topic/linux.debian.bugs.dist/RV419BysYNo

REVISED
    20180815 by docsalvager
"


_2xml="
NAME
    2xml  - Filter to convert an intermediate flat file XML
    2html - Filter to convert an intermediate flat file HTML

SYNOPSIS
    2xml  < INFILE > OUTFILE

DESCRIPTION
    One of a set of six utilities for converting files between XML and CSV format.
        xml2  - convert XML to an intermediate flat file (usually piped to 2csv)
        2xml  - convert intermediate flat file to XML (usually piped from csv2)
        html2 - convert HTML to an intermediate flat file (usually piped to 2csv)
        2html - convert intermediate flat file to HTML (usually piped from csv2)
        csv2  - convert CSV to an intermediate flat file (usually piped to 2xml)
        2csv  - convert intermediate flat file to CSV (usually piped from xml2)

ARGUMENTS
    INFILE
        Redirect input from intermediate flat file created by html2 or csv2.
    OUTFILE
        Redirect output to create an XML file of this name.

HELP
$(printAt 4 "$(command xml2 -h 2>&1)")

RESOURCES
    xml2 manpage
        https://www.unix.com/man-page/debian/1/XML2/
    csv2/2csv options
        https://groups.google.com/forum/#!topic/linux.debian.bugs.dist/RV419BysYNo

REVISED
    20180815 by docsalvager
"


_2html="\
$(noteFind _2xml --file="$kit_DIR/$kit_META")\
"


xsltproc="
NAME
    xsltproc - Parse XML file(s) with XSLT

SYNOPSIS
    xsltproc OPTION... STYLESHEET FILE [FILE ...]

HELP
$(printAt 4 "$(command xsltproc 2>&1)")

RESOURCES
    XSLT processing with xsltproc: http://fhoerni.free.fr/comp/xslt.html
    Really Good Introduction to XML: https://www.sitepoint.com/really-good-introduction-xml/

REVISED
    20171015 by docsalvager
"


yad="
Version on $HOSTNAME:
  yad $(printf "    %s\n\n" "Large amount of help. Will take a few seconds..."; command yad --version)

$(command yad --help-all)

--color:
    On Puppy Linux, the rgb.txt file is at...
        /usr/share/X11/rgb.txt
    A link from /etc/X11/rgb.txt to /usr/share/X11/rgb.txt does not seem to work.
    So, to start the color picker with access to both HEX and RGB values, use...
        yad --color --mode=rgb --palette=/usr/share/X11/rgb.txt

--file | --file-selection  DIR
    DIR cannot be a hidden directory. Must 'cd' to the hidden directory before
    calling 'yad --file ...'
    Example:
        _file=\"\$(cd /root/lib/.meta; yad --file '.')\"

--fontname FONTNAME
    FONTNAME is a quoted, space-delimited string in the Pango Font Description
    Format (see link below). Each space-delimited field may contain:
        One or more comma-separated common font family names such as...
            Normal,Sans,Serif,Monospace
        Optional space-separated list of characteristics that includes...
            styles:
                Normal Oblique Italic
            weights:
                Ultra-Light Light Normal Bold Ultra-Bold Heavy
            variants:
                Normal Small-Caps
            stretch:
                Ultra-Condensed Extra-Condensed Condensed Semi-Condensed
                Normal Expanded Extra-Expanded Ultra-Expanded
        Size in points (decimal)
            (i.e. 10 12 14 ...)

--list:
    --add-on-top
        Causes list to be scrolled to the end upon opening dialog.
    --dclick-action=CMD
    (per http://rpm.pbone.net/index.php3/stat/45/idpl/17003956/numer/1/nazwa/yad)
        Set the CMD as a double-click command. When user double-clicked on row,
        CMD will be launched with values of all columns as an arguments. By
        default double-click selects row and act as OK button for simple lists,
        set the checkbox if --checklist specified and do nothing when list run
        with --multiple option. When double-click specified Enter acts as a
        double-click and Ctrl+Enter acts as an OK button.CMD may contain a
        special character '%s' for setting a position for arguments. By default
        arguments will be concatenated to the end of CMD.
    --column=STRING:TYPE
    (per https://www.mankier.com/1/yad#Options-List_options)
        Set the column header. Types are TEXT, NUM, SZ, FLT, CHK, RD, BAR, IMG,
        HD or TIP. TEXT type is default. Use NUM for integers and FLT for double
        values. TIP is used for define tooltip column. SZ size column type. Works
        exactly like NUM column but shows human readable sizes instead of numbers.
        CHK (checkboxes) and RD (radio toggle) are a boolean columns. BAR is a
        progress bar column. Value must be between 0 and 100. If value is outside
        is range it will be croped to nearest legal value. HD type means a hidden
        column. Such columns are not displayed in the list, only in output. IMG
        may be path to image or icon name from currnet GTK+ icon theme. Size of
        icons may be set in gtk config file at GTK_ICON_SIZE_MENU position of
        gtk-icon-sizes. Image field prints as empty value.
        Special column names @fore@, @back@ and @font@ sets corresponding rows
        attributes. Values of those columns don't show in results.
    NOTES:
        - CMD is a quoted string.
        - All bash expansions and substitutions will occur in CMD string.
        - Functions called in CMD string must be exported to be recognized...
            function yadDclick () {
                :
            }
            export -f yadDclick
    ISSUE(?):
        Cannot get '%s' to work on version 0.12.4. Columns always concatenated.

--notification
    per http://www.murga-linux.com/puppy/viewtopic.php?t=88765 (edited)
        Yad stdin format for menu is:
            menu: LABEL ! COMMAND ! ICON
        By default, the '!' symbol (exclamation) is used to separate values.
        By default, the '|' symbol (vertical bar) is used to separate menu items.
        To change separator characters:
            --separator=STRING
            --item-separator=STRING
        Example with 2 menu items...
            menu: LABEL1 ! COMMAND1 ! ICON1 | LABEL2 ! COMMAND2 ! ICON2
        CODE
            #!/bin/bash
            #
            mkfifo /tmp/01
            exec 3<> /tmp/01
            #
            yad --notification --kill-parent --listen <&3 &
            #
            title=\"<b><big>✔</big> Testing notification                              </b>\"
            text=\"<i>Using HTML markup</i>\"
            add_2=\"⏏ Eject (right-click to open menu)\"
            #
            echo \"icon:gtk-cdrom\" >&3
            echo \"tooltip:$title $progress \n\n$text\n\n$add_2\" >&3
            echo \"menu:Eject /dev/sr0!bash -c eject /dev/sr0!gtk-cdrom|Exit!quit!gtk-quit\" >&3

NOTES
    To dismiss window via keyboard...
      Press [ESC]

SEPARATORS
    Field(data item) separator
        Default is | (pipe)
        Change with option --separator=\"C\"
        \"C\" double(or single?)-quoted character which can be escaped (\\\t,\\\n, etc.)
    Combobox dropdown list items separator
        Default is ! (exclamation/bang)
        Change with option --item-separator=\"C\"
        \"C\" double(or single?)-quoted character which can be escaped (\\\t,\\\n, etc.)
        Enclose all items in quotes as in 'Item 1!Item 2!Item 3'

ERRORS
    Segmentation Fault
      On all attempts to use --list options --sep-column and --sep-value.
    Could not recognize the image file format for file 'yad'
      per http://code.google.com/p/yad/issues/detail
        Normal behavior, when you run yad from the same directory.
        executable and default icon name for yad have the same name. when
        loading any images, yad, at first, looking for file with the same name,
        and if file is not found, try to load icon from current icon theme.
        in your case file was found, but it is not an image.

RESOURCES
    Code project
        https://sourceforge.net/projects/yad-dialog/
    Multiple-item data entry (tutorial)
        http://www.thelinuxrain.com/articles/multiple-item-data-entry-with-yad
    Pango Font Description Format
        http://www.pygtk.org/pygtk2reference/class-pangofontdescription.html
    RPM: man yad
        http://rpm.pbone.net/index.php3/stat/45/idpl/17003956/numer/1/nazwa/yad
    Ubuntu: man yad (with much more explaination of each option)
        http://manpages.ubuntu.com/manpages/zesty/man1/yad.1.html
    YAD --list --dclick-action
        http://code.google.com/p/yad/issues/detail?id=149
    YAD reference by Mankier, May 22, 2016 (ver 0.35 or 0.36 ?)
        https://www.mankier.com/1/yad#Options
    YAD - Tips
        http://www.murga-linux.com/puppy/viewtopic.php?t=97458&start=60
            Show hidden files in file selector
                (a setting in /root/.config/gtk-2.0/gtkfilechooser.ini)
            Use Pango markdown (<span> tag) in buttons
    Notification usage
        http://www.murga-linux.com/puppy/viewtopic.php?t=88765

REVISED
    $_revised by docsalvager
"


yaf_splash="
$(command yaf-splash --help 2>&1)

RESOURCES:
    Color Names:
        /usr/share/X11/rgb.txt
    HTML Documentation:
        http:////usr/share/doc/yaf-splash.htm
    HTML Documentation (new):
        /usr/share/doc/yaf-splash-new.htm

REVISED
    20160617 by docsalvager
"

zenity="
NAME
    zenity - Zenity dialog utility

SYNOPSIS
$(printAt 4 "zenity $(command zenity --version 2>&1)")

$(printAt 4 "$(command zenity --help-all 2>&1)")

REVISED
    20171028 by docsalvager
"


###############################################################################
#
# Directories and files
#
###############################################################################

_etc_fstab="
NAME
    /etc/fstab - static file system mount table for host

DESCRIPTION
    WARNING - NEVER COPY THIS FILE TO ANOTHER HOST!!!
      The UUIDs are different for each host.
      The SSHFS mounts can be copied but...
          BE SURE TO COMMENT OUT THAT HOST's ENTRY AND UNCOMMENT THE OTHERS.

FORMAT
  <file system>
      Device
          Ex:  /dev/sda1
      UUID
        Use 'blkid -s UUID' to print the universally unique identifier
        for a device; this may be used with UUID= as a more robust way to name
        devices that works even if disks are added and removed. See fstab(5).
  <mountpoint>
      Any directory but usually a directory in '/' or '/mnt'
  <type>
    One of:  auto, swap, ext2, ext3, ext4, ...
  <options>
    comma separated list of options
  <dump>
    backup the filesystem: Always 0 since is obsolete
  <pass>
    partition fsck order:  0 = No check, 1 = check first, 2 = check next in line

REVISED
  20171205 by docsalvager
"

_root_Startup="
NAME
    /root/Startup - Xwindows session startup directory

SYNOPSIS
    <command> /root/Startup/README.txt

DESCRIPTION
    Any executable or scripts (or symlink to) placed in this directory
    will be executed after the X desktop has loaded.

    This is handy if you want something to run automatically.

    You can easily create a \"symlink\" (symbolic link) to an executable.
    For example, say that you wanted to run /usr/local/bin/rubix (a game)
    everytime Puppy is started. Use ROX-Filer (the file manager) and open
    two windows, one on /usr/local/bin, the other on /root/Startup.
    Then just drag 'rubix' across and a menu will popup and ask if you want
    to copy, move or link, and you choose to link.

    Note, if you want to execute something at bootup and prior to X desktop
    loading, edit /etc/rc.d/rc.local.

      -- by bkauler

NOTES
    - Due to modifications, all files in this directory have been moved to...
        /home/DocSalvager/root/<HOSTNAME>/Startup
      and a symlink created...
        /root/Startup -> ../home/DocSalvager/root/<HOSTNAME>/Startup
      and a symlink created...
        /initrd/pup_ro1/root/Startup -> ../home/DocSalvager/root/<HOSTNAME>/Startup
      [Q] Why the second symlink?
      [A] AUFS_VERSION 2-standalone.tree-30-20090831 does not reliably support
          deletion of directories. If not explicitly set, the first symlink could
          appear WITHIN the base /root/Startup directory instead of replacing it.

REVISED
    20171129 by docsalvager
"

ssh_config="
CLIENT CONFIG:  $HOST:/etc/ssh/ssh_config

$(printAt 4 "$(cat /etc/ssh/ssh_config)")


CLIENT METADATA:  $HOST:/etc/ssh/ssh_config.meta

$(printAt 4 "$(cat /etc/ssh/ssh_config.meta)")
"

sshd_config="
SERVER CONFIG:  $HOST:/etc/ssh/sshd_config

$(printAt 4 "$(cat /etc/ssh/sshd_config)")


SERVER METADATA:  $HOST:/etc/ssh/sshd_config.meta

$(printAt 4 "$(cat /etc/ssh/sshd_config.meta)")
"


###############################################################################
#
# Macros
#
###############################################################################

rsync__macro="ssh LX02 man rsync 2>&1 | xmessage -file - &"


###############################################################################
#
# Color Names
#
#     Put at end for easy appending programmatically.
#
###############################################################################

black_color="
black
    Hex:
        #000000
    Notes:
        Standard background color for dialog scrollable text.
"

blueMedium_color="
blueMedium
    Hex:
        #D1D7DE
    Notes:
        'Text color 34' in ~/.dircolors for ls text.
"

green1_color="
green1
    Hex:
        #00F500
    Notes:
        000 245 000
"

green2_color="
green1
    Hex:
        #00FF20
    Notes:
        000 255 032
"

greenMedium_color="
greenMedium
    Hex:
        #00A610
    Notes:
        Standard foreground color for dialog scrollable text.
        RoxTerm Color Scheme GTK, custom palette 1, #8.
"

greenDir_color="
greenDir
    Hex:
        #07A410
    Notes:
        ~/.dircolors, 32 (Text green) for files in ls listings.
"

greyBackground_color="
greyBackground
    Hex:
        #E6E7EF
    Notes:
        Standard background color for dialog fixed text.
"

grey1_color="
grey1
    Hex:
        #B5B2B5
    Notes:
        181 178 181
"


redMedium_color="
redMedium
    Hex:
        #B21B1B
    Notes:
        RoxTerm Color Scheme GTK, custom palette 1, #2.
        ~/.dircolors, 41 (Background red) for broken links ls listings.
"
